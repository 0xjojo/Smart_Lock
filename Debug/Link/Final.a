;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;#include <stdbool.h>
;bool isValidId(int id); //to check the id entered stored
;int getInput(); //to change three digits to integer
;unsigned char keypad(); //the get number from keypad
;unsigned char EE_Read(unsigned int inputadd);// to get data from EEPROM
;void EE_Write(unsigned int inputadd, unsigned int PC); // to write data in address
;void Peep();
;int   inputPc , id , inputPc_2 ;
;int x = 0 ;
;int validIDs[5] = {111, 126, 128, 130, 132};

	.DSEG
;
;void main(void)
; 0000 0010 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0011 
; 0000 0012 	unsigned char passcode;
; 0000 0013 	DDRD = 0b11110011 ; // set port D as output all 1 for motor and buzzer
;	passcode -> R17
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0014 	MCUCR = 1 << ISC01 | 1 << ISC00; //choosing the rising edge inttrupt
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0015 	MCUCR = 1 << ISC01 | 1 << ISC00; // Trigger INT0 on rising edge
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0016 	GICR |= 1 << 6;     //Specific interrupt enable
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0017 	MCUCR = 0 << ISC01 | 0 << ISC00; //choosing the low level trigger inttrupt
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0018 	GICR |= 1 << 7;     //Specific interrupt enable
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0019 	PORTD.1 = 1;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001A 	PORTD.2 = 1;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001B 	DDRB = 0b00000111; // Port B for Keypad
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 001C 	PORTB = 0b11111000;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001D 	////mapping the EEPROM
; 0000 001E 	EE_Write(validIDs[0], 203);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 001F 	EE_Write(validIDs[1], 129);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0020 	EE_Write(validIDs[2], 325);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0021 	EE_Write(validIDs[3], 426);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0022 	EE_Write(validIDs[4], 179);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0023 	lcd_init(16);  //16 chars/line
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0024 	lcd_puts("Enter '*' to \n start ! ");
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0025 
; 0000 0026 	while (1) //infinte loop
;PCODE: $00000044 VOL: 0
; 0000 0027 		{
; 0000 0028 		x = keypad();
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0029 		if (x != '*')
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 002A 			{
; 0000 002B 			lcd_clear();
;PCODE: $0000004B VOL: 0
; 0000 002C 			lcd_puts("Enter *\n");
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 002D 			}
; 0000 002E 		else
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 002F 			{
; 0000 0030 			lcd_clear();
;PCODE: $00000051 VOL: 0
; 0000 0031 			lcd_puts("Enter your ID\n");
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0032 			id = getInput(); // Make sure it's a valid id
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0033 			if(!isValidId(id))
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0034 				{
; 0000 0035 				lcd_clear();
;PCODE: $0000005B VOL: 0
; 0000 0036 				lcd_puts("Invalid ID\n Enter *");
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0037 				continue;
;PCODE: $0000005F VOL: 0
; 0000 0038 				}
; 0000 0039 			lcd_clear();
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 003A 			lcd_puts("Enter your PC\n");
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 003B 			inputPc = getInput();
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 003C 
; 0000 003D 			lcd_clear();
;PCODE: $00000067 VOL: 0
; 0000 003E 			passcode = EE_Read(id);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 003F 			if (inputPc == passcode)
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0040 				{
; 0000 0041 				switch (id)
;PCODE: $00000070 VOL: 0
; 0000 0042 					{
; 0000 0043 					case 111:
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0044 						lcd_clear();
;PCODE: $00000073 VOL: 0
; 0000 0045 						lcd_puts("Welcome, Prof\n");
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0046 						break;
;PCODE: $00000077 VOL: 0
; 0000 0047 					case 126:
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0048 						lcd_clear();
;PCODE: $0000007B VOL: 0
; 0000 0049 						lcd_puts("Welcome,\n Mohemmed\n");
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 004A 						break;
;PCODE: $0000007F VOL: 0
; 0000 004B 					case 128:
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 004C 						lcd_clear();
;PCODE: $00000083 VOL: 0
; 0000 004D 						lcd_puts("Welcome, Sherif\n");
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 004E 						break;
;PCODE: $00000087 VOL: 0
; 0000 004F 					case 130:
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0050 						lcd_clear();
;PCODE: $0000008B VOL: 0
; 0000 0051 						lcd_puts("Welcome, Ahmed\n");
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0052 						break;
;PCODE: $0000008F VOL: 0
; 0000 0053 					case 132:
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0054 						lcd_clear();
;PCODE: $00000093 VOL: 0
; 0000 0055 						lcd_puts("Welcome, Jojo\n");
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0056 						break;
;PCODE: $00000097 VOL: 0
; 0000 0057 
; 0000 0058 					}
;PCODE: $00000098 VOL: 0
; 0000 0059 
; 0000 005A 				PORTD.1 = 1;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 005B 				delay_ms(2000);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 005C 				PORTD.1 = 0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 005D 				lcd_clear();
;PCODE: $0000009F VOL: 0
; 0000 005E 				continue;
;PCODE: $000000A0 VOL: 0
; 0000 005F 				}
; 0000 0060 			else
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0061 				{
; 0000 0062 				lcd_clear();
;PCODE: $000000A3 VOL: 0
; 0000 0063 				lcd_puts("Wrong passcode\n Enter *");
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0064 				Peep();
;PCODE: $000000A7 VOL: 0
; 0000 0065 				continue;
;PCODE: $000000A8 VOL: 0
; 0000 0066 				}
;PCODE: $000000A9 VOL: 0
; 0000 0067 			}
;PCODE: $000000AA VOL: 0
; 0000 0068 
; 0000 0069 		};
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 006A }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0

	.DSEG
_0x8:
	.BYTE 0xBE
;
;
;//////////////////////////////////////////////////////////////////////////////
;bool isValidId(int id) //to check id is stored in EEPROM
; 0000 006F {

	.CSEG
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0070 	int i;
; 0000 0071 	for( i = 0; i < 5; i++)
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;	id -> R18,R19
;	i -> R16,R17
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0072 		{
; 0000 0073 		if (id == validIDs[i])
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0074 			return true;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0075 		}
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0076 	return false;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0077 }
;PCODE: $000000D2 VOL: 0
;//////////////////////////////////////////////////////////////////////////////
;int getInput()
; 0000 007A {
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 007B 	int code = 0;
; 0000 007C 	int i, r;
; 0000 007D 	for (i = 0; i < 3; i++)   // get the ID from user
;PCODE: $000000D5 VOL: 0
;	code -> R16,R17
;	i -> R18,R19
;	r -> R20,R21
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 007E 		{
; 0000 007F 		code *= 10;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0080 		r = keypad();
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0081 		lcd_printf("%u", r);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0082 		code += r;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0083 		}
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0084 	return code;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0085 }
;PCODE: $000000FD VOL: 0
;
;//////////////////////////////////////////////////////////////////////////////////////////////Declaring keypad
;unsigned char keypad()
; 0000 0089 {
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 008A 	while (1)
;PCODE: $00000100 VOL: 0
; 0000 008B 		{
; 0000 008C 		PORTB.0 = 0; //C0 is on
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 008D 		PORTB.1 = 1; //C1 is off
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 008E 		PORTB.2 = 1; //C2 is off
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 008F 		switch (PINB)
;PCODE: $00000107 VOL: 0
; 0000 0090 			{
; 0000 0091 			case 0b11110110:
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0092 				while(PINB.3 == 0); //while the button is pressed
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0093 				return 1;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0094 				break;
;PCODE: $00000112 VOL: 0
; 0000 0095 
; 0000 0096 			case 0b11101110:
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0097 				while(PINB.4 == 0); //while the button is pressed
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0098 				return 4;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0099 				break;
;PCODE: $0000011E VOL: 0
; 0000 009A 
; 0000 009B 			case 0b11011110:
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 009C 				while(PINB.5 == 0); //while the button is pressed
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 009D 				return 7;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 009E 				break;
;PCODE: $0000012A VOL: 0
; 0000 009F 
; 0000 00A0 			case 0b10111110:
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00A1 				while(PINB.6 == 0); //while the button is pressed
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00A2 				return '*';
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00A3 				break;
;PCODE: $00000136 VOL: 0
; 0000 00A4 			}
;PCODE: $00000137 VOL: 0
; 0000 00A5 		PORTB.0 = 1; //C0 is off
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00A6 		PORTB.1 = 0; //C1 is on
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00A7 		PORTB.2 = 1; //C2 is off
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00A8 		switch (PINB)
;PCODE: $0000013E VOL: 0
; 0000 00A9 			{
; 0000 00AA 			case 0b11110101:
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00AB 				while(PINB.3 == 0); //while the button is pressed
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00AC 				return 2;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00AD 				break;
;PCODE: $00000149 VOL: 0
; 0000 00AE 
; 0000 00AF 			case 0b11101101:
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00B0 				while(PINB.4 == 0); //while the button is pressed
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00B1 				return 5;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00B2 				break;
;PCODE: $00000155 VOL: 0
; 0000 00B3 
; 0000 00B4 			case 0b11011101:
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00B5 				while(PINB.5 == 0); //while the button is pressed
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00B6 				return 8;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00B7 				break;
;PCODE: $00000161 VOL: 0
; 0000 00B8 
; 0000 00B9 			case 0b10111101:
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00BA 				while(PINB.6 == 0); //while the button is pressed
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00BB 				return 0;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00BC 				break;
;PCODE: $0000016D VOL: 0
; 0000 00BD 			}
;PCODE: $0000016E VOL: 0
; 0000 00BE 		PORTB.0 = 1; //C0 is off
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00BF 		PORTB.1 = 1; //C1 is off
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00C0 		PORTB.2 = 0; //C2 is on
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00C1 		switch (PINB)
;PCODE: $00000175 VOL: 0
; 0000 00C2 			{
; 0000 00C3 			case 0b11110011:
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00C4 				while(PINB.3 == 0); //while the button is pressed
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00C5 				return 3;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00C6 				break;
;PCODE: $00000180 VOL: 0
; 0000 00C7 
; 0000 00C8 			case 0b11101011:
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00C9 				while(PINB.4 == 0); //while the button is pressed
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00CA 				return 6;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00CB 				break;
;PCODE: $0000018C VOL: 0
; 0000 00CC 
; 0000 00CD 			case 0b11011011:
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00CE 				while(PINB.5 == 0); //while the button is pressed
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00CF 				return 9;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00D0 				break;
;PCODE: $00000198 VOL: 0
; 0000 00D1 
; 0000 00D2 			case 0b10111011:
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00D3 				while(PINB.6 == 0); //while the button is pressed
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00D4 				return '#';
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00D5 				break;
;PCODE: $000001A4 VOL: 0
; 0000 00D6 			}
;PCODE: $000001A5 VOL: 0
; 0000 00D7 		}
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 00D8 
; 0000 00D9 }
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;/////////////////////////////////////////////////////////////////////////Address EEPROM
;void EE_Write(unsigned int inputadd, unsigned int PC)
; 0000 00DC {
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00DD 	while(EECR.1 == 1);  //Wait till the EEPROM is ready for new operation
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;	inputadd -> R18,R19
;	PC -> R16,R17
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00DE 	EEAR = inputadd; //ADRESS REGEISTER
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 00DF 	EEDR = PC;      //DATA regiester
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00E0 	EECR.2 = 1;    //EE Master Write Enable
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00E1 	EECR.1 = 1;    //EEWrite Enable
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00E2 }
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;//////////////////////////////////////////////////////////////Read EEPROM
;unsigned char EE_Read(unsigned int inputadd)
; 0000 00E5 {
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 00E6 	while(EECR.1 == 1);  //Wait till the EEPROM is ready for new operation
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;	inputadd -> R16,R17
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 00E7 	EEAR = inputadd;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 00E8 	EECR.0 = 1;          //Read Enable (EERE)
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 00E9 	return EEDR;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 00EA }
;PCODE: $000001D4 VOL: 0
;////////////////////////////////////////////////////////////Change the user PC
;void EE_WriteChange(unsigned int inputadd, unsigned int inputCh_1)
; 0000 00ED {
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00EE 	while(EECR.1 == 1);  //Wait till the EEPROM is ready for new operation
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;	inputadd -> R18,R19
;	inputCh_1 -> R16,R17
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00EF 	EEAR = inputadd;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 00F0 	EEDR = inputCh_1;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 00F1 	EECR.2 = 1;    //EEMWE
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 00F2 	EECR.1 = 1;    //EEWE
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 00F3 }
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;///////////////////////////////////////////////////////// Buzzer function
;void Peep()
; 0000 00F6 {
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00F7 	PORTD.5 = 1;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 00F8 	delay_ms(1000);
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00F9 	PORTD.5 = 0;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 00FA 	delay_ms(500);
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 00FB }
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;//////////////////////////////////////////////////////////////////////////Interrupt definition
;interrupt [3] void ext1(void)
; 0000 00FE {
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 00FF 	int pc ;
; 0000 0100 
; 0000 0101 
; 0000 0102 	lcd_puts("Enter your ID\n");
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;	pc -> R16,R17
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0103 	id = getInput(); // Make sure it's a valid id
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0104 	if(!isValidId(id))
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0105 		{
; 0000 0106 		lcd_clear();
;PCODE: $00000206 VOL: 0
; 0000 0107 		lcd_puts("Invalid ID\n Enter *");
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0108 		}
; 0000 0109 	lcd_clear();
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 010A 	lcd_puts("Enter old PC");
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 010B 	inputPc = getInput();
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 010C 	lcd_clear();
;PCODE: $00000211 VOL: 0
; 0000 010D 	pc = EE_Read(id);
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 010E 	if (pc == inputPc )
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 010F 		{
; 0000 0110 
; 0000 0111 		lcd_puts("Enter new PC");
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0112 		inputPc = getInput();
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0113 		lcd_clear();
;PCODE: $0000021E VOL: 0
; 0000 0114 		lcd_puts("Re-enter new PC");
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0115 		inputPc_2 = getInput();
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0116 		if (inputPc == inputPc_2)
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 0117 			{
; 0000 0118 			EE_Write(id, inputPc_2 );
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0119 			lcd_clear();
;PCODE: $0000022A VOL: 0
; 0000 011A 			lcd_puts("New PC stored");
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 011B 			}
; 0000 011C 		else
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 011D 			{
; 0000 011E 			lcd_clear();
;PCODE: $00000230 VOL: 0
; 0000 011F 			lcd_puts("PCs are not Identical");
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 0120 			}
;PCODE: $00000234 VOL: 0
; 0000 0121 		}
; 0000 0122 
; 0000 0123 
; 0000 0124 }
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0

	.DSEG
_0x8A:
	.BYTE 0x71
;interrupt [2]void exp0 (void)
; 0000 0126 {

	.CSEG
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0127 	int pc;
; 0000 0128 	lcd_puts("Enter Admin PC");
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;	pc -> R16,R17
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0129 	id =   getInput();
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 012A 	if (id == validIDs[0] )
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 012B 		{
; 0000 012C 		lcd_clear();
;PCODE: $00000246 VOL: 0
; 0000 012D 		lcd_puts("Enter student ID");
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 012E 		id =  getInput();
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 012F 		lcd_clear();
;PCODE: $0000024C VOL: 0
; 0000 0130 		lcd_puts("Enter new PC");
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0131 		pc =  getInput();
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0132 		EE_Write(id, pc);
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 0133 		lcd_clear();
;PCODE: $00000255 VOL: 0
; 0000 0134 		lcd_puts("PC is stored");
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 0135 		}
; 0000 0136 	else
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 0137 		{
; 0000 0138 		lcd_clear();
;PCODE: $0000025B VOL: 0
; 0000 0139 		lcd_puts("Contact Admin");
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 013A 		Peep();
;PCODE: $0000025F VOL: 0
; 0000 013B 		Peep();
;PCODE: $00000260 VOL: 0
; 0000 013C 		}
;PCODE: $00000261 VOL: 0
; 0000 013D 
; 0000 013E 
; 0000 013F }
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0

	.DSEG
_0x8F:
	.BYTE 0x48
