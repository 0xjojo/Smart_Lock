
AVRASM ver. 2.1.30  D:\(9)Ninth term\Embedded Systems\Final project\Debug\List\Final.asm Mon Dec 07 20:34:37 2020

D:\(9)Ninth term\Embedded Systems\Final project\Debug\List\Final.asm(1095): warning: Register r4 already defined by the .DEF directive
D:\(9)Ninth term\Embedded Systems\Final project\Debug\List\Final.asm(1096): warning: Register r5 already defined by the .DEF directive
D:\(9)Ninth term\Embedded Systems\Final project\Debug\List\Final.asm(1097): warning: Register r6 already defined by the .DEF directive
D:\(9)Ninth term\Embedded Systems\Final project\Debug\List\Final.asm(1098): warning: Register r7 already defined by the .DEF directive
D:\(9)Ninth term\Embedded Systems\Final project\Debug\List\Final.asm(1099): warning: Register r8 already defined by the .DEF directive
D:\(9)Ninth term\Embedded Systems\Final project\Debug\List\Final.asm(1100): warning: Register r9 already defined by the .DEF directive
D:\(9)Ninth term\Embedded Systems\Final project\Debug\List\Final.asm(1101): warning: Register r10 already defined by the .DEF directive
D:\(9)Ninth term\Embedded Systems\Final project\Debug\List\Final.asm(1102): warning: Register r11 already defined by the .DEF directive
D:\(9)Ninth term\Embedded Systems\Final project\Debug\List\Final.asm(1103): warning: Register r13 already defined by the .DEF directive
D:\(9)Ninth term\Embedded Systems\Final project\Debug\List\Final.asm(1104): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.38 Evaluation
                 ;(C) Copyright 1998-2019 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _inputPc=R4
                 	.DEF _inputPc_msb=R5
                 	.DEF _id=R6
                 	.DEF _id_msb=R7
                 	.DEF _inputPc_2=R8
                 	.DEF _inputPc_2_msb=R9
                 	.DEF _x=R10
                 	.DEF _x_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 012e 	JMP  __RESET
000002 940c 02e1 	JMP  _exp0
000004 940c 02b4 	JMP  _ext1
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000      	.DB  0x0,0x0
                 
                 _0x3:
000034 006f
000035 007e
000036 0080
000037 0082      	.DB  0x6F,0x0,0x7E,0x0,0x80,0x0,0x82,0x0
D:\(9)Ninth term\Embedded Systems\Final project\Debug\List\Final.asm(1147): warning: .cseg .db misalignment - padding zero byte
000038 0084      	.DB  0x84
                 _0x0:
000039 6e45
00003a 6574
00003b 2072
00003c 2a27      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x27,0x2A
00003d 2027
00003e 6f74
00003f 0a20
000040 7320      	.DB  0x27,0x20,0x74,0x6F,0x20,0xA,0x20,0x73
000041 6174
000042 7472
000043 2120
000044 0020      	.DB  0x74,0x61,0x72,0x74,0x20,0x21,0x20,0x0
000045 6e45
000046 6574
000047 2072
000048 0a2a      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x2A,0xA
000049 4500
00004a 746e
00004b 7265
00004c 7920      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x79
00004d 756f
00004e 2072
00004f 4449
000050 000a      	.DB  0x6F,0x75,0x72,0x20,0x49,0x44,0xA,0x0
000051 6e49
000052 6176
000053 696c
000054 2064      	.DB  0x49,0x6E,0x76,0x61,0x6C,0x69,0x64,0x20
000055 4449
000056 200a
000057 6e45
000058 6574      	.DB  0x49,0x44,0xA,0x20,0x45,0x6E,0x74,0x65
000059 2072
00005a 002a
00005b 6e45
00005c 6574      	.DB  0x72,0x20,0x2A,0x0,0x45,0x6E,0x74,0x65
00005d 2072
00005e 6f79
00005f 7275
000060 5020      	.DB  0x72,0x20,0x79,0x6F,0x75,0x72,0x20,0x50
000061 0a43
000062 5700
000063 6c65
000064 6f63      	.DB  0x43,0xA,0x0,0x57,0x65,0x6C,0x63,0x6F
000065 656d
000066 202c
000067 7250
000068 666f      	.DB  0x6D,0x65,0x2C,0x20,0x50,0x72,0x6F,0x66
000069 000a
00006a 6557
00006b 636c
00006c 6d6f      	.DB  0xA,0x0,0x57,0x65,0x6C,0x63,0x6F,0x6D
00006d 2c65
00006e 200a
00006f 6f4d
000070 6568      	.DB  0x65,0x2C,0xA,0x20,0x4D,0x6F,0x68,0x65
000071 6d6d
000072 6465
000073 000a
000074 6557      	.DB  0x6D,0x6D,0x65,0x64,0xA,0x0,0x57,0x65
000075 636c
000076 6d6f
000077 2c65
000078 5320      	.DB  0x6C,0x63,0x6F,0x6D,0x65,0x2C,0x20,0x53
000079 6568
00007a 6972
00007b 0a66
00007c 5700      	.DB  0x68,0x65,0x72,0x69,0x66,0xA,0x0,0x57
00007d 6c65
00007e 6f63
00007f 656d
000080 202c      	.DB  0x65,0x6C,0x63,0x6F,0x6D,0x65,0x2C,0x20
000081 6841
000082 656d
000083 0a64
000084 5700      	.DB  0x41,0x68,0x6D,0x65,0x64,0xA,0x0,0x57
000085 6c65
000086 6f63
000087 656d
000088 202c      	.DB  0x65,0x6C,0x63,0x6F,0x6D,0x65,0x2C,0x20
000089 6f4a
00008a 6f6a
00008b 000a
00008c 7257      	.DB  0x4A,0x6F,0x6A,0x6F,0xA,0x0,0x57,0x72
00008d 6e6f
00008e 2067
00008f 6170
000090 7373      	.DB  0x6F,0x6E,0x67,0x20,0x70,0x61,0x73,0x73
000091 6f63
000092 6564
000093 200a
000094 6e45      	.DB  0x63,0x6F,0x64,0x65,0xA,0x20,0x45,0x6E
000095 6574
000096 2072
000097 002a
000098 7525      	.DB  0x74,0x65,0x72,0x20,0x2A,0x0,0x25,0x75
000099 4500
00009a 746e
00009b 7265
00009c 6f20      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x6F
00009d 646c
00009e 5020
00009f 0043
0000a0 6e45      	.DB  0x6C,0x64,0x20,0x50,0x43,0x0,0x45,0x6E
0000a1 6574
0000a2 2072
0000a3 656e
0000a4 2077      	.DB  0x74,0x65,0x72,0x20,0x6E,0x65,0x77,0x20
0000a5 4350
0000a6 5200
0000a7 2d65
0000a8 6e65      	.DB  0x50,0x43,0x0,0x52,0x65,0x2D,0x65,0x6E
0000a9 6574
0000aa 2072
0000ab 656e
0000ac 2077      	.DB  0x74,0x65,0x72,0x20,0x6E,0x65,0x77,0x20
0000ad 4350
0000ae 4e00
0000af 7765
0000b0 5020      	.DB  0x50,0x43,0x0,0x4E,0x65,0x77,0x20,0x50
0000b1 2043
0000b2 7473
0000b3 726f
0000b4 6465      	.DB  0x43,0x20,0x73,0x74,0x6F,0x72,0x65,0x64
0000b5 5000
0000b6 7343
0000b7 6120
0000b8 6572      	.DB  0x0,0x50,0x43,0x73,0x20,0x61,0x72,0x65
0000b9 6e20
0000ba 746f
0000bb 4920
0000bc 6564      	.DB  0x20,0x6E,0x6F,0x74,0x20,0x49,0x64,0x65
0000bd 746e
0000be 6369
0000bf 6c61
0000c0 4500      	.DB  0x6E,0x74,0x69,0x63,0x61,0x6C,0x0,0x45
0000c1 746e
0000c2 7265
0000c3 4120
0000c4 6d64      	.DB  0x6E,0x74,0x65,0x72,0x20,0x41,0x64,0x6D
0000c5 6e69
0000c6 5020
0000c7 0043
0000c8 6e45      	.DB  0x69,0x6E,0x20,0x50,0x43,0x0,0x45,0x6E
0000c9 6574
0000ca 2072
0000cb 7473
0000cc 6475      	.DB  0x74,0x65,0x72,0x20,0x73,0x74,0x75,0x64
0000cd 6e65
0000ce 2074
0000cf 4449
0000d0 5000      	.DB  0x65,0x6E,0x74,0x20,0x49,0x44,0x0,0x50
0000d1 2043
0000d2 7369
0000d3 7320
0000d4 6f74      	.DB  0x43,0x20,0x69,0x73,0x20,0x73,0x74,0x6F
0000d5 6572
0000d6 0064
0000d7 6f43
0000d8 746e      	.DB  0x72,0x65,0x64,0x0,0x43,0x6F,0x6E,0x74
0000d9 6361
0000da 2074
0000db 6441
0000dc 696d      	.DB  0x61,0x63,0x74,0x20,0x41,0x64,0x6D,0x69
0000dd 006e      	.DB  0x6E,0x0
                 _0x2000003:
0000de c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000df 0002      	.DW  0x02
0000e0 000a      	.DW  0x0A
0000e1 0066      	.DW  __REG_VARS*2
                 
0000e2 0009      	.DW  0x09
0000e3 02d7      	.DW  _validIDs
0000e4 0068      	.DW  _0x3*2
                 
0000e5 0018      	.DW  0x18
0000e6 0160      	.DW  _0x8
0000e7 0072      	.DW  _0x0*2
                 
0000e8 0009      	.DW  0x09
0000e9 0178      	.DW  _0x8+24
0000ea 008a      	.DW  _0x0*2+24
                 
0000eb 000f      	.DW  0x0F
0000ec 0181      	.DW  _0x8+33
0000ed 0093      	.DW  _0x0*2+33
                 
0000ee 0014      	.DW  0x14
0000ef 0190      	.DW  _0x8+48
0000f0 00a2      	.DW  _0x0*2+48
                 
0000f1 000f      	.DW  0x0F
0000f2 01a4      	.DW  _0x8+68
0000f3 00b6      	.DW  _0x0*2+68
                 
0000f4 000f      	.DW  0x0F
0000f5 01b3      	.DW  _0x8+83
0000f6 00c5      	.DW  _0x0*2+83
                 
0000f7 0014      	.DW  0x14
0000f8 01c2      	.DW  _0x8+98
0000f9 00d4      	.DW  _0x0*2+98
                 
0000fa 0011      	.DW  0x11
0000fb 01d6      	.DW  _0x8+118
0000fc 00e8      	.DW  _0x0*2+118
                 
0000fd 0010      	.DW  0x10
0000fe 01e7      	.DW  _0x8+135
0000ff 00f9      	.DW  _0x0*2+135
                 
000100 000f      	.DW  0x0F
000101 01f7      	.DW  _0x8+151
000102 0109      	.DW  _0x0*2+151
                 
000103 0018      	.DW  0x18
000104 0206      	.DW  _0x8+166
000105 0118      	.DW  _0x0*2+166
                 
000106 000f      	.DW  0x0F
000107 021e      	.DW  _0x8A
000108 0093      	.DW  _0x0*2+33
                 
000109 0014      	.DW  0x14
00010a 022d      	.DW  _0x8A+15
00010b 00a2      	.DW  _0x0*2+48
                 
00010c 000d      	.DW  0x0D
00010d 0241      	.DW  _0x8A+35
00010e 0133      	.DW  _0x0*2+193
                 
00010f 000d      	.DW  0x0D
000110 024e      	.DW  _0x8A+48
000111 0140      	.DW  _0x0*2+206
                 
000112 0010      	.DW  0x10
000113 025b      	.DW  _0x8A+61
000114 014d      	.DW  _0x0*2+219
                 
000115 000e      	.DW  0x0E
000116 026b      	.DW  _0x8A+77
000117 015d      	.DW  _0x0*2+235
                 
000118 0016      	.DW  0x16
000119 0279      	.DW  _0x8A+91
00011a 016b      	.DW  _0x0*2+249
                 
00011b 000f      	.DW  0x0F
00011c 028f      	.DW  _0x8F
00011d 0181      	.DW  _0x0*2+271
                 
00011e 0011      	.DW  0x11
00011f 029e      	.DW  _0x8F+15
000120 0190      	.DW  _0x0*2+286
                 
000121 000d      	.DW  0x0D
000122 02af      	.DW  _0x8F+32
000123 0140      	.DW  _0x0*2+206
                 
000124 000d      	.DW  0x0D
000125 02bc      	.DW  _0x8F+45
000126 01a1      	.DW  _0x0*2+303
                 
000127 000e      	.DW  0x0E
000128 02c9      	.DW  _0x8F+58
000129 01ae      	.DW  _0x0*2+316
                 
00012a 0002      	.DW  0x02
00012b 02e1      	.DW  __base_y_G100
00012c 01bc      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00012d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00012e 94f8      	CLI
00012f 27ee      	CLR  R30
000130 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000131 e0f1      	LDI  R31,1
000132 bffb      	OUT  GICR,R31
000133 bfeb      	OUT  GICR,R30
000134 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000135 e08d      	LDI  R24,(14-2)+1
000136 e0a2      	LDI  R26,2
000137 27bb      	CLR  R27
                 __CLEAR_REG:
000138 93ed      	ST   X+,R30
000139 958a      	DEC  R24
00013a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00013b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00013c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00013d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00013e 93ed      	ST   X+,R30
00013f 9701      	SBIW R24,1
000140 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000141 ebee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000142 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000143 9185      	LPM  R24,Z+
000144 9195      	LPM  R25,Z+
000145 9700      	SBIW R24,0
000146 f061      	BREQ __GLOBAL_INI_END
000147 91a5      	LPM  R26,Z+
000148 91b5      	LPM  R27,Z+
000149 9005      	LPM  R0,Z+
00014a 9015      	LPM  R1,Z+
00014b 01bf      	MOVW R22,R30
00014c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00014d 9005      	LPM  R0,Z+
00014e 920d      	ST   X+,R0
00014f 9701      	SBIW R24,1
000150 f7e1      	BRNE __GLOBAL_INI_LOOP
000151 01fb      	MOVW R30,R22
000152 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000153 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000154 bfed      	OUT  SPL,R30
000155 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000156 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000157 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000158 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000159 940c 015b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdbool.h>
                 ;bool isValidId(int id); //to check the id entered stored
                 ;int getInput(); //to change three digits to integer
                 ;unsigned char keypad(); //the get number from keypad
                 ;unsigned char EE_Read(unsigned int inputadd);// to get data from EEPROM
                 ;void EE_Write(unsigned int inputadd, unsigned int PC); // to write data in address
                 ;void Peep();
                 ;int   inputPc , id , inputPc_2 ;
                 ;int x = 0 ;
                 ;int validIDs[5] = {111, 126, 128, 130, 132};
                 
                 	.DSEG
                 ;
                 ;void main(void)
                 ; 0000 0010 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0011 
                 ; 0000 0012 	unsigned char passcode;
                 ; 0000 0013 	DDRD = 0b11110011 ; // set port D as output all 1 for motor and buzzer
                 ;	passcode -> R17
00015b efe3      	LDI  R30,LOW(243)
00015c bbe1      	OUT  0x11,R30
                 ; 0000 0014 	MCUCR = 1 << ISC01 | 1 << ISC00; //choosing the rising edge inttrupt
00015d e0e3      	LDI  R30,LOW(3)
00015e bfe5      	OUT  0x35,R30
                 ; 0000 0015 	MCUCR = 1 << ISC01 | 1 << ISC00; // Trigger INT0 on rising edge
00015f bfe5      	OUT  0x35,R30
                 ; 0000 0016 	GICR |= 1 << 6;     //Specific interrupt enable
000160 b7eb      	IN   R30,0x3B
000161 64e0      	ORI  R30,0x40
000162 bfeb      	OUT  0x3B,R30
                 ; 0000 0017 	MCUCR = 0 << ISC01 | 0 << ISC00; //choosing the low level trigger inttrupt
000163 e0e0      	LDI  R30,LOW(0)
000164 bfe5      	OUT  0x35,R30
                 ; 0000 0018 	GICR |= 1 << 7;     //Specific interrupt enable
000165 b7eb      	IN   R30,0x3B
000166 68e0      	ORI  R30,0x80
000167 bfeb      	OUT  0x3B,R30
                 ; 0000 0019 	PORTD.1 = 1;
000168 9a91      	SBI  0x12,1
                 ; 0000 001A 	PORTD.2 = 1;
000169 9a92      	SBI  0x12,2
                 ; 0000 001B 	DDRB = 0b00000111; // Port B for Keypad
00016a e0e7      	LDI  R30,LOW(7)
00016b bbe7      	OUT  0x17,R30
                 ; 0000 001C 	PORTB = 0b11111000;
00016c efe8      	LDI  R30,LOW(248)
00016d bbe8      	OUT  0x18,R30
                 ; 0000 001D 	////mapping the EEPROM
                 ; 0000 001E 	EE_Write(validIDs[0], 203);
00016e d3a6      	RCALL SUBOPT_0x0
00016f 93fa      	ST   -Y,R31
000170 93ea      	ST   -Y,R30
000171 ecab      	LDI  R26,LOW(203)
000172 e0b0      	LDI  R27,0
000173 d11d      	RCALL _EE_Write
                 ; 0000 001F 	EE_Write(validIDs[1], 129);
                +
000174 91e0 02d9+LDS R30 , _validIDs + ( 2 )
000176 91f0 02da+LDS R31 , _validIDs + ( 2 ) + 1
                 	__GETW1MN _validIDs,2
000178 93fa      	ST   -Y,R31
000179 93ea      	ST   -Y,R30
00017a e8a1      	LDI  R26,LOW(129)
00017b e0b0      	LDI  R27,0
00017c d114      	RCALL _EE_Write
                 ; 0000 0020 	EE_Write(validIDs[2], 325);
                +
00017d 91e0 02db+LDS R30 , _validIDs + ( 4 )
00017f 91f0 02dc+LDS R31 , _validIDs + ( 4 ) + 1
                 	__GETW1MN _validIDs,4
000181 93fa      	ST   -Y,R31
000182 93ea      	ST   -Y,R30
000183 e4a5      	LDI  R26,LOW(325)
000184 e0b1      	LDI  R27,HIGH(325)
000185 d10b      	RCALL _EE_Write
                 ; 0000 0021 	EE_Write(validIDs[3], 426);
                +
000186 91e0 02dd+LDS R30 , _validIDs + ( 6 )
000188 91f0 02de+LDS R31 , _validIDs + ( 6 ) + 1
                 	__GETW1MN _validIDs,6
00018a 93fa      	ST   -Y,R31
00018b 93ea      	ST   -Y,R30
00018c eaaa      	LDI  R26,LOW(426)
00018d e0b1      	LDI  R27,HIGH(426)
00018e d102      	RCALL _EE_Write
                 ; 0000 0022 	EE_Write(validIDs[4], 179);
                +
00018f 91e0 02df+LDS R30 , _validIDs + ( 8 )
000191 91f0 02e0+LDS R31 , _validIDs + ( 8 ) + 1
                 	__GETW1MN _validIDs,8
000193 93fa      	ST   -Y,R31
000194 93ea      	ST   -Y,R30
000195 eba3      	LDI  R26,LOW(179)
000196 e0b0      	LDI  R27,0
000197 d0f9      	RCALL _EE_Write
                 ; 0000 0023 	lcd_init(16);  //16 chars/line
000198 e1a0      	LDI  R26,LOW(16)
000199 d1df      	RCALL _lcd_init
                 ; 0000 0024 	lcd_puts("Enter '*' to \n start ! ");
                +
00019a e6a0     +LDI R26 , LOW ( _0x8 + ( 0 ) )
00019b e0b1     +LDI R27 , HIGH ( _0x8 + ( 0 ) )
                 	__POINTW2MN _0x8,0
00019c d1cd      	RCALL _lcd_puts
                 ; 0000 0025 
                 ; 0000 0026 	while (1) //infinte loop
                 _0x9:
                 ; 0000 0027 		{
                 ; 0000 0028 		x = keypad();
00019d d095      	RCALL _keypad
00019e 2eae      	MOV  R10,R30
00019f 24bb      	CLR  R11
                 ; 0000 0029 		if (x != '*')
0001a0 e2ea      	LDI  R30,LOW(42)
0001a1 e0f0      	LDI  R31,HIGH(42)
0001a2 15ea      	CP   R30,R10
0001a3 05fb      	CPC  R31,R11
0001a4 f029      	BREQ _0xC
                 ; 0000 002A 			{
                 ; 0000 002B 			lcd_clear();
0001a5 d1a4      	RCALL _lcd_clear
                 ; 0000 002C 			lcd_puts("Enter *\n");
                +
0001a6 e7a8     +LDI R26 , LOW ( _0x8 + ( 24 ) )
0001a7 e0b1     +LDI R27 , HIGH ( _0x8 + ( 24 ) )
                 	__POINTW2MN _0x8,24
0001a8 d1c1      	RCALL _lcd_puts
                 ; 0000 002D 			}
                 ; 0000 002E 		else
0001a9 c04a      	RJMP _0xD
                 _0xC:
                 ; 0000 002F 			{
                 ; 0000 0030 			lcd_clear();
0001aa d19f      	RCALL _lcd_clear
                 ; 0000 0031 			lcd_puts("Enter your ID\n");
                +
0001ab e8a1     +LDI R26 , LOW ( _0x8 + ( 33 ) )
0001ac e0b1     +LDI R27 , HIGH ( _0x8 + ( 33 ) )
                 	__POINTW2MN _0x8,33
0001ad d36c      	RCALL SUBOPT_0x1
                 ; 0000 0032 			id = getInput(); // Make sure it's a valid id
                 ; 0000 0033 			if(!isValidId(id))
0001ae f429      	BRNE _0xE
                 ; 0000 0034 				{
                 ; 0000 0035 				lcd_clear();
0001af d19a      	RCALL _lcd_clear
                 ; 0000 0036 				lcd_puts("Invalid ID\n Enter *");
                +
0001b0 e9a0     +LDI R26 , LOW ( _0x8 + ( 48 ) )
0001b1 e0b1     +LDI R27 , HIGH ( _0x8 + ( 48 ) )
                 	__POINTW2MN _0x8,48
0001b2 d1b7      	RCALL _lcd_puts
                 ; 0000 0037 				continue;
0001b3 cfe9      	RJMP _0x9
                 ; 0000 0038 				}
                 ; 0000 0039 			lcd_clear();
                 _0xE:
0001b4 d195      	RCALL _lcd_clear
                 ; 0000 003A 			lcd_puts("Enter your PC\n");
                +
0001b5 eaa4     +LDI R26 , LOW ( _0x8 + ( 68 ) )
0001b6 e0b1     +LDI R27 , HIGH ( _0x8 + ( 68 ) )
                 	__POINTW2MN _0x8,68
0001b7 d369      	RCALL SUBOPT_0x2
                 ; 0000 003B 			inputPc = getInput();
                 ; 0000 003C 
                 ; 0000 003D 			lcd_clear();
                 ; 0000 003E 			passcode = EE_Read(id);
0001b8 2f1e      	MOV  R17,R30
                 ; 0000 003F 			if (inputPc == passcode)
0001b9 01d2      	MOVW R26,R4
0001ba e0f0      	LDI  R31,0
0001bb 17ea      	CP   R30,R26
0001bc 07fb      	CPC  R31,R27
0001bd f581      	BRNE _0xF
                 ; 0000 0040 				{
                 ; 0000 0041 				switch (id)
0001be 01f3      	MOVW R30,R6
                 ; 0000 0042 					{
                 ; 0000 0043 					case 111:
0001bf 36ef      	CPI  R30,LOW(0x6F)
0001c0 e0a0      	LDI  R26,HIGH(0x6F)
0001c1 07fa      	CPC  R31,R26
0001c2 f421      	BRNE _0x13
                 ; 0000 0044 						lcd_clear();
0001c3 d186      	RCALL _lcd_clear
                 ; 0000 0045 						lcd_puts("Welcome, Prof\n");
                +
0001c4 eba3     +LDI R26 , LOW ( _0x8 + ( 83 ) )
0001c5 e0b1     +LDI R27 , HIGH ( _0x8 + ( 83 ) )
                 	__POINTW2MN _0x8,83
0001c6 c01f      	RJMP _0x92
                 ; 0000 0046 						break;
                 ; 0000 0047 					case 126:
                 _0x13:
0001c7 37ee      	CPI  R30,LOW(0x7E)
0001c8 e0a0      	LDI  R26,HIGH(0x7E)
0001c9 07fa      	CPC  R31,R26
0001ca f421      	BRNE _0x14
                 ; 0000 0048 						lcd_clear();
0001cb d17e      	RCALL _lcd_clear
                 ; 0000 0049 						lcd_puts("Welcome,\n Mohemmed\n");
                +
0001cc eca2     +LDI R26 , LOW ( _0x8 + ( 98 ) )
0001cd e0b1     +LDI R27 , HIGH ( _0x8 + ( 98 ) )
                 	__POINTW2MN _0x8,98
0001ce c017      	RJMP _0x92
                 ; 0000 004A 						break;
                 ; 0000 004B 					case 128:
                 _0x14:
0001cf 38e0      	CPI  R30,LOW(0x80)
0001d0 e0a0      	LDI  R26,HIGH(0x80)
0001d1 07fa      	CPC  R31,R26
0001d2 f421      	BRNE _0x15
                 ; 0000 004C 						lcd_clear();
0001d3 d176      	RCALL _lcd_clear
                 ; 0000 004D 						lcd_puts("Welcome, Sherif\n");
                +
0001d4 eda6     +LDI R26 , LOW ( _0x8 + ( 118 ) )
0001d5 e0b1     +LDI R27 , HIGH ( _0x8 + ( 118 ) )
                 	__POINTW2MN _0x8,118
0001d6 c00f      	RJMP _0x92
                 ; 0000 004E 						break;
                 ; 0000 004F 					case 130:
                 _0x15:
0001d7 38e2      	CPI  R30,LOW(0x82)
0001d8 e0a0      	LDI  R26,HIGH(0x82)
0001d9 07fa      	CPC  R31,R26
0001da f421      	BRNE _0x16
                 ; 0000 0050 						lcd_clear();
0001db d16e      	RCALL _lcd_clear
                 ; 0000 0051 						lcd_puts("Welcome, Ahmed\n");
                +
0001dc eea7     +LDI R26 , LOW ( _0x8 + ( 135 ) )
0001dd e0b1     +LDI R27 , HIGH ( _0x8 + ( 135 ) )
                 	__POINTW2MN _0x8,135
0001de c007      	RJMP _0x92
                 ; 0000 0052 						break;
                 ; 0000 0053 					case 132:
                 _0x16:
0001df 38e4      	CPI  R30,LOW(0x84)
0001e0 e0a0      	LDI  R26,HIGH(0x84)
0001e1 07fa      	CPC  R31,R26
0001e2 f421      	BRNE _0x12
                 ; 0000 0054 						lcd_clear();
0001e3 d166      	RCALL _lcd_clear
                 ; 0000 0055 						lcd_puts("Welcome, Jojo\n");
                +
0001e4 efa7     +LDI R26 , LOW ( _0x8 + ( 151 ) )
0001e5 e0b1     +LDI R27 , HIGH ( _0x8 + ( 151 ) )
                 	__POINTW2MN _0x8,151
                 _0x92:
0001e6 d183      	RCALL _lcd_puts
                 ; 0000 0056 						break;
                 ; 0000 0057 
                 ; 0000 0058 					}
                 _0x12:
                 ; 0000 0059 
                 ; 0000 005A 				PORTD.1 = 1;
0001e7 9a91      	SBI  0x12,1
                 ; 0000 005B 				delay_ms(2000);
0001e8 eda0      	LDI  R26,LOW(2000)
0001e9 e0b7      	LDI  R27,HIGH(2000)
0001ea d3b7      	RCALL _delay_ms
                 ; 0000 005C 				PORTD.1 = 0;
0001eb 9891      	CBI  0x12,1
                 ; 0000 005D 				lcd_clear();
0001ec d15d      	RCALL _lcd_clear
                 ; 0000 005E 				continue;
0001ed cfaf      	RJMP _0x9
                 ; 0000 005F 				}
                 ; 0000 0060 			else
                 _0xF:
                 ; 0000 0061 				{
                 ; 0000 0062 				lcd_clear();
0001ee d15b      	RCALL _lcd_clear
                 ; 0000 0063 				lcd_puts("Wrong passcode\n Enter *");
                +
0001ef e0a6     +LDI R26 , LOW ( _0x8 + ( 166 ) )
0001f0 e0b2     +LDI R27 , HIGH ( _0x8 + ( 166 ) )
                 	__POINTW2MN _0x8,166
0001f1 d178      	RCALL _lcd_puts
                 ; 0000 0064 				Peep();
0001f2 d0b8      	RCALL _Peep
                 ; 0000 0065 				continue;
0001f3 cfa9      	RJMP _0x9
                 ; 0000 0066 				}
                 ; 0000 0067 			}
                 _0xD:
                 ; 0000 0068 
                 ; 0000 0069 		};
0001f4 cfa8      	RJMP _0x9
                 ; 0000 006A }
                 _0x1D:
0001f5 cfff      	RJMP _0x1D
                 ; .FEND
                 
                 	.DSEG
                 _0x8:
000160           	.BYTE 0xBE
                 ;
                 ;
                 ;//////////////////////////////////////////////////////////////////////////////
                 ;bool isValidId(int id) //to check id is stored in EEPROM
                 ; 0000 006F {
                 
                 	.CSEG
                 _isValidId:
                 ; .FSTART _isValidId
                 ; 0000 0070 	int i;
                 ; 0000 0071 	for( i = 0; i < 5; i++)
0001f6 d36a      	RCALL __SAVELOCR4
0001f7 019d      	MOVW R18,R26
                 ;	id -> R18,R19
                 ;	i -> R16,R17
                +
0001f8 e000     +LDI R16 , LOW ( 0 )
0001f9 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x1F:
                +
0001fa 3005     +CPI R16 , LOW ( 5 )
0001fb e0e0     +LDI R30 , HIGH ( 5 )
0001fc 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
0001fd f484      	BRGE _0x20
                 ; 0000 0072 		{
                 ; 0000 0073 		if (id == validIDs[i])
0001fe 01f8      	MOVW R30,R16
0001ff eda7      	LDI  R26,LOW(_validIDs)
000200 e0b2      	LDI  R27,HIGH(_validIDs)
000201 0fee      	LSL  R30
000202 1fff      	ROL  R31
000203 0fae      	ADD  R26,R30
000204 1fbf      	ADC  R27,R31
000205 d38f      	RCALL __GETW1P
000206 17e2      	CP   R30,R18
000207 07f3      	CPC  R31,R19
000208 f411      	BRNE _0x21
                 ; 0000 0074 			return true;
000209 e0e1      	LDI  R30,LOW(1)
00020a c16b      	RJMP _0x2080002
                 ; 0000 0075 		}
                 _0x21:
                +
00020b 5f0f     +SUBI R16 , LOW ( - 1 )
00020c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00020d cfec      	RJMP _0x1F
                 _0x20:
                 ; 0000 0076 	return false;
00020e e0e0      	LDI  R30,LOW(0)
00020f c166      	RJMP _0x2080002
                 ; 0000 0077 }
                 ; .FEND
                 ;//////////////////////////////////////////////////////////////////////////////
                 ;int getInput()
                 ; 0000 007A {
                 _getInput:
                 ; .FSTART _getInput
                 ; 0000 007B 	int code = 0;
                 ; 0000 007C 	int i, r;
                 ; 0000 007D 	for (i = 0; i < 3; i++)   // get the ID from user
000210 d34e      	RCALL __SAVELOCR6
                 ;	code -> R16,R17
                 ;	i -> R18,R19
                 ;	r -> R20,R21
                +
000211 e000     +LDI R16 , LOW ( 0 )
000212 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000213 e020     +LDI R18 , LOW ( 0 )
000214 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x23:
                +
000215 3023     +CPI R18 , LOW ( 3 )
000216 e0e0     +LDI R30 , HIGH ( 3 )
000217 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
000218 f4bc      	BRGE _0x24
                 ; 0000 007E 		{
                 ; 0000 007F 		code *= 10;
000219 01f8      	MOVW R30,R16
00021a e0aa      	LDI  R26,LOW(10)
00021b e0b0      	LDI  R27,HIGH(10)
00021c d365      	RCALL __MULW12
00021d 018f      	MOVW R16,R30
                 ; 0000 0080 		r = keypad();
00021e d014      	RCALL _keypad
00021f 2f4e      	MOV  R20,R30
000220 2755      	CLR  R21
                 ; 0000 0081 		lcd_printf("%u", r);
                +
000221 e3e0     +LDI R30 , LOW ( 2 * _0x0 + ( 190 ) )
000222 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 190 ) )
                 	__POINTW1FN _0x0,190
000223 93fa      	ST   -Y,R31
000224 93ea      	ST   -Y,R30
000225 01fa      	MOVW R30,R20
000226 d34e      	RCALL __CWD1
000227 d375      	RCALL __PUTPARD1
000228 e084      	LDI  R24,4
000229 d2af      	RCALL _lcd_printf
00022a 9626      	ADIW R28,6
                 ; 0000 0082 		code += r;
                +
00022b 0f04     +ADD R16 , R20
00022c 1f15     +ADC R17 , R21
                 	__ADDWRR 16,17,20,21
                 ; 0000 0083 		}
                +
00022d 5f2f     +SUBI R18 , LOW ( - 1 )
00022e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00022f cfe5      	RJMP _0x23
                 _0x24:
                 ; 0000 0084 	return code;
000230 01f8      	MOVW R30,R16
000231 d334      	RCALL __LOADLOCR6
000232 c06a      	RJMP _0x2080003
                 ; 0000 0085 }
                 ; .FEND
                 ;
                 ;//////////////////////////////////////////////////////////////////////////////////////////////Declaring keypad
                 ;unsigned char keypad()
                 ; 0000 0089 {
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 008A 	while (1)
                 _0x25:
                 ; 0000 008B 		{
                 ; 0000 008C 		PORTB.0 = 0; //C0 is on
000233 98c0      	CBI  0x18,0
                 ; 0000 008D 		PORTB.1 = 1; //C1 is off
000234 9ac1      	SBI  0x18,1
                 ; 0000 008E 		PORTB.2 = 1; //C2 is off
000235 9ac2      	SBI  0x18,2
                 ; 0000 008F 		switch (PINB)
000236 b3e6      	IN   R30,0x16
                 ; 0000 0090 			{
                 ; 0000 0091 			case 0b11110110:
000237 3fe6      	CPI  R30,LOW(0xF6)
000238 f429      	BRNE _0x31
                 ; 0000 0092 				while(PINB.3 == 0); //while the button is pressed
                 _0x32:
000239 9bb3      	SBIS 0x16,3
00023a cffe      	RJMP _0x32
                 ; 0000 0093 				return 1;
00023b e0e1      	LDI  R30,LOW(1)
00023c 9508      	RET
                 ; 0000 0094 				break;
00023d c014      	RJMP _0x30
                 ; 0000 0095 
                 ; 0000 0096 			case 0b11101110:
                 _0x31:
00023e 3eee      	CPI  R30,LOW(0xEE)
00023f f429      	BRNE _0x35
                 ; 0000 0097 				while(PINB.4 == 0); //while the button is pressed
                 _0x36:
000240 9bb4      	SBIS 0x16,4
000241 cffe      	RJMP _0x36
                 ; 0000 0098 				return 4;
000242 e0e4      	LDI  R30,LOW(4)
000243 9508      	RET
                 ; 0000 0099 				break;
000244 c00d      	RJMP _0x30
                 ; 0000 009A 
                 ; 0000 009B 			case 0b11011110:
                 _0x35:
000245 3dee      	CPI  R30,LOW(0xDE)
000246 f429      	BRNE _0x39
                 ; 0000 009C 				while(PINB.5 == 0); //while the button is pressed
                 _0x3A:
000247 9bb5      	SBIS 0x16,5
000248 cffe      	RJMP _0x3A
                 ; 0000 009D 				return 7;
000249 e0e7      	LDI  R30,LOW(7)
00024a 9508      	RET
                 ; 0000 009E 				break;
00024b c006      	RJMP _0x30
                 ; 0000 009F 
                 ; 0000 00A0 			case 0b10111110:
                 _0x39:
00024c 3bee      	CPI  R30,LOW(0xBE)
00024d f421      	BRNE _0x30
                 ; 0000 00A1 				while(PINB.6 == 0); //while the button is pressed
                 _0x3E:
00024e 9bb6      	SBIS 0x16,6
00024f cffe      	RJMP _0x3E
                 ; 0000 00A2 				return '*';
000250 e2ea      	LDI  R30,LOW(42)
000251 9508      	RET
                 ; 0000 00A3 				break;
                 ; 0000 00A4 			}
                 _0x30:
                 ; 0000 00A5 		PORTB.0 = 1; //C0 is off
000252 9ac0      	SBI  0x18,0
                 ; 0000 00A6 		PORTB.1 = 0; //C1 is on
000253 98c1      	CBI  0x18,1
                 ; 0000 00A7 		PORTB.2 = 1; //C2 is off
000254 9ac2      	SBI  0x18,2
                 ; 0000 00A8 		switch (PINB)
000255 b3e6      	IN   R30,0x16
                 ; 0000 00A9 			{
                 ; 0000 00AA 			case 0b11110101:
000256 3fe5      	CPI  R30,LOW(0xF5)
000257 f429      	BRNE _0x4A
                 ; 0000 00AB 				while(PINB.3 == 0); //while the button is pressed
                 _0x4B:
000258 9bb3      	SBIS 0x16,3
000259 cffe      	RJMP _0x4B
                 ; 0000 00AC 				return 2;
00025a e0e2      	LDI  R30,LOW(2)
00025b 9508      	RET
                 ; 0000 00AD 				break;
00025c c014      	RJMP _0x49
                 ; 0000 00AE 
                 ; 0000 00AF 			case 0b11101101:
                 _0x4A:
00025d 3eed      	CPI  R30,LOW(0xED)
00025e f429      	BRNE _0x4E
                 ; 0000 00B0 				while(PINB.4 == 0); //while the button is pressed
                 _0x4F:
00025f 9bb4      	SBIS 0x16,4
000260 cffe      	RJMP _0x4F
                 ; 0000 00B1 				return 5;
000261 e0e5      	LDI  R30,LOW(5)
000262 9508      	RET
                 ; 0000 00B2 				break;
000263 c00d      	RJMP _0x49
                 ; 0000 00B3 
                 ; 0000 00B4 			case 0b11011101:
                 _0x4E:
000264 3ded      	CPI  R30,LOW(0xDD)
000265 f429      	BRNE _0x52
                 ; 0000 00B5 				while(PINB.5 == 0); //while the button is pressed
                 _0x53:
000266 9bb5      	SBIS 0x16,5
000267 cffe      	RJMP _0x53
                 ; 0000 00B6 				return 8;
000268 e0e8      	LDI  R30,LOW(8)
000269 9508      	RET
                 ; 0000 00B7 				break;
00026a c006      	RJMP _0x49
                 ; 0000 00B8 
                 ; 0000 00B9 			case 0b10111101:
                 _0x52:
00026b 3bed      	CPI  R30,LOW(0xBD)
00026c f421      	BRNE _0x49
                 ; 0000 00BA 				while(PINB.6 == 0); //while the button is pressed
                 _0x57:
00026d 9bb6      	SBIS 0x16,6
00026e cffe      	RJMP _0x57
                 ; 0000 00BB 				return 0;
00026f e0e0      	LDI  R30,LOW(0)
000270 9508      	RET
                 ; 0000 00BC 				break;
                 ; 0000 00BD 			}
                 _0x49:
                 ; 0000 00BE 		PORTB.0 = 1; //C0 is off
000271 9ac0      	SBI  0x18,0
                 ; 0000 00BF 		PORTB.1 = 1; //C1 is off
000272 9ac1      	SBI  0x18,1
                 ; 0000 00C0 		PORTB.2 = 0; //C2 is on
000273 98c2      	CBI  0x18,2
                 ; 0000 00C1 		switch (PINB)
000274 b3e6      	IN   R30,0x16
                 ; 0000 00C2 			{
                 ; 0000 00C3 			case 0b11110011:
000275 3fe3      	CPI  R30,LOW(0xF3)
000276 f429      	BRNE _0x63
                 ; 0000 00C4 				while(PINB.3 == 0); //while the button is pressed
                 _0x64:
000277 9bb3      	SBIS 0x16,3
000278 cffe      	RJMP _0x64
                 ; 0000 00C5 				return 3;
000279 e0e3      	LDI  R30,LOW(3)
00027a 9508      	RET
                 ; 0000 00C6 				break;
00027b c014      	RJMP _0x62
                 ; 0000 00C7 
                 ; 0000 00C8 			case 0b11101011:
                 _0x63:
00027c 3eeb      	CPI  R30,LOW(0xEB)
00027d f429      	BRNE _0x67
                 ; 0000 00C9 				while(PINB.4 == 0); //while the button is pressed
                 _0x68:
00027e 9bb4      	SBIS 0x16,4
00027f cffe      	RJMP _0x68
                 ; 0000 00CA 				return 6;
000280 e0e6      	LDI  R30,LOW(6)
000281 9508      	RET
                 ; 0000 00CB 				break;
000282 c00d      	RJMP _0x62
                 ; 0000 00CC 
                 ; 0000 00CD 			case 0b11011011:
                 _0x67:
000283 3deb      	CPI  R30,LOW(0xDB)
000284 f429      	BRNE _0x6B
                 ; 0000 00CE 				while(PINB.5 == 0); //while the button is pressed
                 _0x6C:
000285 9bb5      	SBIS 0x16,5
000286 cffe      	RJMP _0x6C
                 ; 0000 00CF 				return 9;
000287 e0e9      	LDI  R30,LOW(9)
000288 9508      	RET
                 ; 0000 00D0 				break;
000289 c006      	RJMP _0x62
                 ; 0000 00D1 
                 ; 0000 00D2 			case 0b10111011:
                 _0x6B:
00028a 3beb      	CPI  R30,LOW(0xBB)
00028b f421      	BRNE _0x62
                 ; 0000 00D3 				while(PINB.6 == 0); //while the button is pressed
                 _0x70:
00028c 9bb6      	SBIS 0x16,6
00028d cffe      	RJMP _0x70
                 ; 0000 00D4 				return '#';
00028e e2e3      	LDI  R30,LOW(35)
00028f 9508      	RET
                 ; 0000 00D5 				break;
                 ; 0000 00D6 			}
                 _0x62:
                 ; 0000 00D7 		}
000290 cfa2      	RJMP _0x25
                 ; 0000 00D8 
                 ; 0000 00D9 }
                 ; .FEND
                 ;/////////////////////////////////////////////////////////////////////////Address EEPROM
                 ;void EE_Write(unsigned int inputadd, unsigned int PC)
                 ; 0000 00DC {
                 _EE_Write:
                 ; .FSTART _EE_Write
                 ; 0000 00DD 	while(EECR.1 == 1);  //Wait till the EEPROM is ready for new operation
000291 d2cf      	RCALL __SAVELOCR4
000292 018d      	MOVW R16,R26
                +
000293 812c     +LDD R18 , Y + 4
000294 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
                 ;	inputadd -> R18,R19
                 ;	PC -> R16,R17
                 _0x73:
000295 99e1      	SBIC 0x1C,1
000296 cffe      	RJMP _0x73
                 ; 0000 00DE 	EEAR = inputadd; //ADRESS REGEISTER
                +
000297 bb3f     +OUT 30 + 1 , R19
000298 bb2e     +OUT 30 , R18
                 	__OUTWR 18,19,30
                 ; 0000 00DF 	EEDR = PC;      //DATA regiester
000299 bb0d      	OUT  0x1D,R16
                 ; 0000 00E0 	EECR.2 = 1;    //EE Master Write Enable
00029a 9ae2      	SBI  0x1C,2
                 ; 0000 00E1 	EECR.1 = 1;    //EEWrite Enable
00029b 9ae1      	SBI  0x1C,1
                 ; 0000 00E2 }
00029c d2cb      	RCALL __LOADLOCR4
                 _0x2080003:
00029d 9626      	ADIW R28,6
00029e 9508      	RET
                 ; .FEND
                 ;//////////////////////////////////////////////////////////////Read EEPROM
                 ;unsigned char EE_Read(unsigned int inputadd)
                 ; 0000 00E5 {
                 _EE_Read:
                 ; .FSTART _EE_Read
                 ; 0000 00E6 	while(EECR.1 == 1);  //Wait till the EEPROM is ready for new operation
00029f 931a      	ST   -Y,R17
0002a0 930a      	ST   -Y,R16
0002a1 018d      	MOVW R16,R26
                 ;	inputadd -> R16,R17
                 _0x7A:
0002a2 99e1      	SBIC 0x1C,1
0002a3 cffe      	RJMP _0x7A
                 ; 0000 00E7 	EEAR = inputadd;
                +
0002a4 bb1f     +OUT 30 + 1 , R17
0002a5 bb0e     +OUT 30 , R16
                 	__OUTWR 16,17,30
                 ; 0000 00E8 	EECR.0 = 1;          //Read Enable (EERE)
0002a6 9ae0      	SBI  0x1C,0
                 ; 0000 00E9 	return EEDR;
0002a7 b3ed      	IN   R30,0x1D
0002a8 9109      	LD   R16,Y+
0002a9 9119      	LD   R17,Y+
0002aa 9508      	RET
                 ; 0000 00EA }
                 ; .FEND
                 ;////////////////////////////////////////////////////////////Change the user PC
                 ;void EE_WriteChange(unsigned int inputadd, unsigned int inputCh_1)
                 ; 0000 00ED {
                 ; 0000 00EE 	while(EECR.1 == 1);  //Wait till the EEPROM is ready for new operation
                 ;	inputadd -> R18,R19
                 ;	inputCh_1 -> R16,R17
                 ; 0000 00EF 	EEAR = inputadd;
                 ; 0000 00F0 	EEDR = inputCh_1;
                 ; 0000 00F1 	EECR.2 = 1;    //EEMWE
                 ; 0000 00F2 	EECR.1 = 1;    //EEWE
                 ; 0000 00F3 }
                 ;///////////////////////////////////////////////////////// Buzzer function
                 ;void Peep()
                 ; 0000 00F6 {
                 _Peep:
                 ; .FSTART _Peep
                 ; 0000 00F7 	PORTD.5 = 1;
0002ab 9a95      	SBI  0x12,5
                 ; 0000 00F8 	delay_ms(1000);
0002ac eea8      	LDI  R26,LOW(1000)
0002ad e0b3      	LDI  R27,HIGH(1000)
0002ae d2f3      	RCALL _delay_ms
                 ; 0000 00F9 	PORTD.5 = 0;
0002af 9895      	CBI  0x12,5
                 ; 0000 00FA 	delay_ms(500);
0002b0 efa4      	LDI  R26,LOW(500)
0002b1 e0b1      	LDI  R27,HIGH(500)
0002b2 d2ef      	RCALL _delay_ms
                 ; 0000 00FB }
0002b3 9508      	RET
                 ; .FEND
                 ;//////////////////////////////////////////////////////////////////////////Interrupt definition
                 ;interrupt [3] void ext1(void)
                 ; 0000 00FE {
                 _ext1:
                 ; .FSTART _ext1
0002b4 d272      	RCALL SUBOPT_0x3
                 ; 0000 00FF 	int pc ;
                 ; 0000 0100 
                 ; 0000 0101 
                 ; 0000 0102 	lcd_puts("Enter your ID\n");
                 ;	pc -> R16,R17
                +
0002b5 e1ae     +LDI R26 , LOW ( _0x8A + ( 0 ) )
0002b6 e0b2     +LDI R27 , HIGH ( _0x8A + ( 0 ) )
                 	__POINTW2MN _0x8A,0
0002b7 d262      	RCALL SUBOPT_0x1
                 ; 0000 0103 	id = getInput(); // Make sure it's a valid id
                 ; 0000 0104 	if(!isValidId(id))
0002b8 f421      	BRNE _0x8B
                 ; 0000 0105 		{
                 ; 0000 0106 		lcd_clear();
0002b9 d090      	RCALL _lcd_clear
                 ; 0000 0107 		lcd_puts("Invalid ID\n Enter *");
                +
0002ba e2ad     +LDI R26 , LOW ( _0x8A + ( 15 ) )
0002bb e0b2     +LDI R27 , HIGH ( _0x8A + ( 15 ) )
                 	__POINTW2MN _0x8A,15
0002bc d0ad      	RCALL _lcd_puts
                 ; 0000 0108 		}
                 ; 0000 0109 	lcd_clear();
                 _0x8B:
0002bd d08c      	RCALL _lcd_clear
                 ; 0000 010A 	lcd_puts("Enter old PC");
                +
0002be e4a1     +LDI R26 , LOW ( _0x8A + ( 35 ) )
0002bf e0b2     +LDI R27 , HIGH ( _0x8A + ( 35 ) )
                 	__POINTW2MN _0x8A,35
0002c0 d260      	RCALL SUBOPT_0x2
                 ; 0000 010B 	inputPc = getInput();
                 ; 0000 010C 	lcd_clear();
                 ; 0000 010D 	pc = EE_Read(id);
0002c1 2f0e      	MOV  R16,R30
0002c2 2711      	CLR  R17
                 ; 0000 010E 	if (pc == inputPc )
                +
0002c3 1640     +CP R4 , R16
0002c4 0651     +CPC R5 , R17
                 	__CPWRR 4,5,16,17
0002c5 f4d1      	BRNE _0x8C
                 ; 0000 010F 		{
                 ; 0000 0110 
                 ; 0000 0111 		lcd_puts("Enter new PC");
                +
0002c6 e4ae     +LDI R26 , LOW ( _0x8A + ( 48 ) )
0002c7 e0b2     +LDI R27 , HIGH ( _0x8A + ( 48 ) )
                 	__POINTW2MN _0x8A,48
0002c8 d0a1      	RCALL _lcd_puts
                 ; 0000 0112 		inputPc = getInput();
0002c9 df46      	RCALL _getInput
0002ca 012f      	MOVW R4,R30
                 ; 0000 0113 		lcd_clear();
0002cb d07e      	RCALL _lcd_clear
                 ; 0000 0114 		lcd_puts("Re-enter new PC");
                +
0002cc e5ab     +LDI R26 , LOW ( _0x8A + ( 61 ) )
0002cd e0b2     +LDI R27 , HIGH ( _0x8A + ( 61 ) )
                 	__POINTW2MN _0x8A,61
0002ce d09b      	RCALL _lcd_puts
                 ; 0000 0115 		inputPc_2 = getInput();
0002cf df40      	RCALL _getInput
0002d0 014f      	MOVW R8,R30
                 ; 0000 0116 		if (inputPc == inputPc_2)
                +
0002d1 1484     +CP R8 , R4
0002d2 0495     +CPC R9 , R5
                 	__CPWRR 8,9,4,5
0002d3 f441      	BRNE _0x8D
                 ; 0000 0117 			{
                 ; 0000 0118 			EE_Write(id, inputPc_2 );
0002d4 927a      	ST   -Y,R7
0002d5 926a      	ST   -Y,R6
0002d6 01d4      	MOVW R26,R8
0002d7 dfb9      	RCALL _EE_Write
                 ; 0000 0119 			lcd_clear();
0002d8 d071      	RCALL _lcd_clear
                 ; 0000 011A 			lcd_puts("New PC stored");
                +
0002d9 e6ab     +LDI R26 , LOW ( _0x8A + ( 77 ) )
0002da e0b2     +LDI R27 , HIGH ( _0x8A + ( 77 ) )
                 	__POINTW2MN _0x8A,77
0002db c003      	RJMP _0x93
                 ; 0000 011B 			}
                 ; 0000 011C 		else
                 _0x8D:
                 ; 0000 011D 			{
                 ; 0000 011E 			lcd_clear();
0002dc d06d      	RCALL _lcd_clear
                 ; 0000 011F 			lcd_puts("PCs are not Identical");
                +
0002dd e7a9     +LDI R26 , LOW ( _0x8A + ( 91 ) )
0002de e0b2     +LDI R27 , HIGH ( _0x8A + ( 91 ) )
                 	__POINTW2MN _0x8A,91
                 _0x93:
0002df d08a      	RCALL _lcd_puts
                 ; 0000 0120 			}
                 ; 0000 0121 		}
                 ; 0000 0122 
                 ; 0000 0123 
                 ; 0000 0124 }
                 _0x8C:
0002e0 c025      	RJMP _0x94
                 ; .FEND
                 
                 	.DSEG
                 _0x8A:
00021e           	.BYTE 0x71
                 ;interrupt [2]void exp0 (void)
                 ; 0000 0126 {
                 
                 	.CSEG
                 _exp0:
                 ; .FSTART _exp0
0002e1 d245      	RCALL SUBOPT_0x3
                 ; 0000 0127 	int pc;
                 ; 0000 0128 	lcd_puts("Enter Admin PC");
                 ;	pc -> R16,R17
                +
0002e2 e8af     +LDI R26 , LOW ( _0x8F + ( 0 ) )
0002e3 e0b2     +LDI R27 , HIGH ( _0x8F + ( 0 ) )
                 	__POINTW2MN _0x8F,0
0002e4 d085      	RCALL _lcd_puts
                 ; 0000 0129 	id =   getInput();
0002e5 df2a      	RCALL _getInput
0002e6 013f      	MOVW R6,R30
                 ; 0000 012A 	if (id == validIDs[0] )
0002e7 d22d      	RCALL SUBOPT_0x0
0002e8 15e6      	CP   R30,R6
0002e9 05f7      	CPC  R31,R7
0002ea f4a9      	BRNE _0x90
                 ; 0000 012B 		{
                 ; 0000 012C 		lcd_clear();
0002eb d05e      	RCALL _lcd_clear
                 ; 0000 012D 		lcd_puts("Enter student ID");
                +
0002ec e9ae     +LDI R26 , LOW ( _0x8F + ( 15 ) )
0002ed e0b2     +LDI R27 , HIGH ( _0x8F + ( 15 ) )
                 	__POINTW2MN _0x8F,15
0002ee d07b      	RCALL _lcd_puts
                 ; 0000 012E 		id =  getInput();
0002ef df20      	RCALL _getInput
0002f0 013f      	MOVW R6,R30
                 ; 0000 012F 		lcd_clear();
0002f1 d058      	RCALL _lcd_clear
                 ; 0000 0130 		lcd_puts("Enter new PC");
                +
0002f2 eaaf     +LDI R26 , LOW ( _0x8F + ( 32 ) )
0002f3 e0b2     +LDI R27 , HIGH ( _0x8F + ( 32 ) )
                 	__POINTW2MN _0x8F,32
0002f4 d075      	RCALL _lcd_puts
                 ; 0000 0131 		pc =  getInput();
0002f5 df1a      	RCALL _getInput
0002f6 018f      	MOVW R16,R30
                 ; 0000 0132 		EE_Write(id, pc);
0002f7 927a      	ST   -Y,R7
0002f8 926a      	ST   -Y,R6
0002f9 01d8      	MOVW R26,R16
0002fa df96      	RCALL _EE_Write
                 ; 0000 0133 		lcd_clear();
0002fb d04e      	RCALL _lcd_clear
                 ; 0000 0134 		lcd_puts("PC is stored");
                +
0002fc ebac     +LDI R26 , LOW ( _0x8F + ( 45 ) )
0002fd e0b2     +LDI R27 , HIGH ( _0x8F + ( 45 ) )
                 	__POINTW2MN _0x8F,45
0002fe d06b      	RCALL _lcd_puts
                 ; 0000 0135 		}
                 ; 0000 0136 	else
0002ff c006      	RJMP _0x91
                 _0x90:
                 ; 0000 0137 		{
                 ; 0000 0138 		lcd_clear();
000300 d049      	RCALL _lcd_clear
                 ; 0000 0139 		lcd_puts("Contact Admin");
                +
000301 eca9     +LDI R26 , LOW ( _0x8F + ( 58 ) )
000302 e0b2     +LDI R27 , HIGH ( _0x8F + ( 58 ) )
                 	__POINTW2MN _0x8F,58
000303 d066      	RCALL _lcd_puts
                 ; 0000 013A 		Peep();
000304 dfa6      	RCALL _Peep
                 ; 0000 013B 		Peep();
000305 dfa5      	RCALL _Peep
                 ; 0000 013C 		}
                 _0x91:
                 ; 0000 013D 
                 ; 0000 013E 
                 ; 0000 013F }
                 _0x94:
000306 9109      	LD   R16,Y+
000307 9119      	LD   R17,Y+
000308 91e9      	LD   R30,Y+
000309 bfef      	OUT  SREG,R30
00030a 91f9      	LD   R31,Y+
00030b 91e9      	LD   R30,Y+
00030c 91b9      	LD   R27,Y+
00030d 91a9      	LD   R26,Y+
00030e 9199      	LD   R25,Y+
00030f 9189      	LD   R24,Y+
000310 9179      	LD   R23,Y+
000311 9169      	LD   R22,Y+
000312 90f9      	LD   R15,Y+
000313 9019      	LD   R1,Y+
000314 9009      	LD   R0,Y+
000315 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x8F:
00028f           	.BYTE 0x48
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000316 931a      	ST   -Y,R17
000317 2f1a      	MOV  R17,R26
000318 b3eb      	IN   R30,0x1B
000319 70ef      	ANDI R30,LOW(0xF)
00031a 2fae      	MOV  R26,R30
00031b 2fe1      	MOV  R30,R17
00031c 7fe0      	ANDI R30,LOW(0xF0)
00031d 2bea      	OR   R30,R26
00031e bbeb      	OUT  0x1B,R30
                +
00031f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000320 958a     +DEC R24
000321 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000322 9ada      	SBI  0x1B,2
                +
000323 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000324 958a     +DEC R24
000325 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000326 98da      	CBI  0x1B,2
                +
000327 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000328 958a     +DEC R24
000329 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00032a c078      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00032b 93aa      	ST   -Y,R26
00032c 81a8      	LD   R26,Y
00032d dfe8      	RCALL __lcd_write_nibble_G100
00032e 81e8          ld    r30,y
00032f 95e2          swap  r30
000330 83e8          st    y,r30
000331 81a8      	LD   R26,Y
000332 dfe3      	RCALL __lcd_write_nibble_G100
                +
000333 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000334 958a     +DEC R24
000335 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000336 9621      	ADIW R28,1
000337 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000338 931a      	ST   -Y,R17
000339 930a      	ST   -Y,R16
00033a 2f1a      	MOV  R17,R26
00033b 810a      	LDD  R16,Y+2
00033c 2fe1      	MOV  R30,R17
00033d e0f0      	LDI  R31,0
00033e 51ef      	SUBI R30,LOW(-__base_y_G100)
00033f 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000340 81e0      	LD   R30,Z
000341 0fe0      	ADD  R30,R16
000342 2fae      	MOV  R26,R30
000343 dfe7      	RCALL __lcd_write_data
000344 2ed0      	MOV  R13,R16
000345 2ec1      	MOV  R12,R17
000346 8119      	LDD  R17,Y+1
000347 8108      	LDD  R16,Y+0
000348 9623      	ADIW R28,3
000349 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00034a e0a2      	LDI  R26,LOW(2)
00034b d1eb      	RCALL SUBOPT_0x4
00034c e0ac      	LDI  R26,LOW(12)
00034d dfdd      	RCALL __lcd_write_data
00034e e0a1      	LDI  R26,LOW(1)
00034f d1e7      	RCALL SUBOPT_0x4
000350 e0e0      	LDI  R30,LOW(0)
000351 2ece      	MOV  R12,R30
000352 2ede      	MOV  R13,R30
000353 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000354 931a      	ST   -Y,R17
000355 2f1a      	MOV  R17,R26
000356 301a      	CPI  R17,10
000357 f021      	BREQ _0x2000005
000358 91e0 02e5 	LDS  R30,__lcd_maxx
00035a 16de      	CP   R13,R30
00035b f040      	BRLO _0x2000004
                 _0x2000005:
00035c e0e0      	LDI  R30,LOW(0)
00035d 93ea      	ST   -Y,R30
00035e 94c3      	INC  R12
00035f 2dac      	MOV  R26,R12
000360 dfd7      	RCALL _lcd_gotoxy
000361 301a      	CPI  R17,10
000362 f409      	BRNE _0x2000007
000363 c03f      	RJMP _0x2080001
                 _0x2000007:
                 _0x2000004:
000364 94d3      	INC  R13
000365 9ad8      	SBI  0x1B,0
000366 2fa1      	MOV  R26,R17
000367 dfc3      	RCALL __lcd_write_data
000368 98d8      	CBI  0x1B,0
000369 c039      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00036a d1f6      	RCALL __SAVELOCR4
00036b 019d      	MOVW R18,R26
                 _0x2000008:
00036c 01d9      	MOVW R26,R18
                +
00036d 5f2f     +SUBI R18 , LOW ( - 1 )
00036e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00036f 91ec      	LD   R30,X
000370 2f1e      	MOV  R17,R30
000371 30e0      	CPI  R30,0
000372 f019      	BREQ _0x200000A
000373 2fa1      	MOV  R26,R17
000374 dfdf      	RCALL _lcd_putchar
000375 cff6      	RJMP _0x2000008
                 _0x200000A:
                 _0x2080002:
000376 d1f1      	RCALL __LOADLOCR4
000377 9624      	ADIW R28,4
000378 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000379 931a      	ST   -Y,R17
00037a 2f1a      	MOV  R17,R26
00037b b3ea      	IN   R30,0x1A
00037c 6fe0      	ORI  R30,LOW(0xF0)
00037d bbea      	OUT  0x1A,R30
00037e 9ad2      	SBI  0x1A,2
00037f 9ad0      	SBI  0x1A,0
000380 9ad1      	SBI  0x1A,1
000381 98da      	CBI  0x1B,2
000382 98d8      	CBI  0x1B,0
000383 98d9      	CBI  0x1B,1
000384 9310 02e5 	STS  __lcd_maxx,R17
000386 2fe1      	MOV  R30,R17
000387 58e0      	SUBI R30,-LOW(128)
                +
000388 93e0 02e3+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00038a 2fe1      	MOV  R30,R17
00038b 54e0      	SUBI R30,-LOW(192)
                +
00038c 93e0 02e4+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00038e e1a4      	LDI  R26,LOW(20)
00038f e0b0      	LDI  R27,0
000390 d211      	RCALL _delay_ms
000391 d1a9      	RCALL SUBOPT_0x5
000392 d1a8      	RCALL SUBOPT_0x5
000393 d1a7      	RCALL SUBOPT_0x5
000394 e2a0      	LDI  R26,LOW(32)
000395 df80      	RCALL __lcd_write_nibble_G100
                +
000396 ec88     +LDI R24 , LOW ( 200 )
000397 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000398 9701     +SBIW R24 , 1
000399 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00039a e2a8      	LDI  R26,LOW(40)
00039b df8f      	RCALL __lcd_write_data
00039c e0a4      	LDI  R26,LOW(4)
00039d df8d      	RCALL __lcd_write_data
00039e e8a5      	LDI  R26,LOW(133)
00039f df8b      	RCALL __lcd_write_data
0003a0 e0a6      	LDI  R26,LOW(6)
0003a1 df89      	RCALL __lcd_write_data
0003a2 dfa7      	RCALL _lcd_clear
                 _0x2080001:
0003a3 9119      	LD   R17,Y+
0003a4 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 __print_G101:
                 ; .FSTART __print_G101
0003a5 93ba      	ST   -Y,R27
0003a6 93aa      	ST   -Y,R26
0003a7 9726      	SBIW R28,6
0003a8 d1b6      	RCALL __SAVELOCR6
0003a9 e010      	LDI  R17,0
0003aa 85ac      	LDD  R26,Y+12
0003ab 85bd      	LDD  R27,Y+12+1
0003ac e0e0      	LDI  R30,LOW(0)
0003ad e0f0      	LDI  R31,HIGH(0)
0003ae 93ed      	ST   X+,R30
0003af 93fc      	ST   X,R31
                 _0x2020016:
0003b0 89ea      	LDD  R30,Y+18
0003b1 89fb      	LDD  R31,Y+18+1
0003b2 9631      	ADIW R30,1
0003b3 8bea      	STD  Y+18,R30
0003b4 8bfb      	STD  Y+18+1,R31
0003b5 9731      	SBIW R30,1
0003b6 91e4      	LPM  R30,Z
0003b7 2f2e      	MOV  R18,R30
0003b8 30e0      	CPI  R30,0
0003b9 f409      	BRNE PC+2
0003ba c109      	RJMP _0x2020018
0003bb 2fe1      	MOV  R30,R17
0003bc 30e0      	CPI  R30,0
0003bd f431      	BRNE _0x202001C
0003be 3225      	CPI  R18,37
0003bf f411      	BRNE _0x202001D
0003c0 e011      	LDI  R17,LOW(1)
0003c1 c001      	RJMP _0x202001E
                 _0x202001D:
0003c2 d17f      	RCALL SUBOPT_0x6
                 _0x202001E:
0003c3 c0ff      	RJMP _0x202001B
                 _0x202001C:
0003c4 30e1      	CPI  R30,LOW(0x1)
0003c5 f4a1      	BRNE _0x202001F
0003c6 3225      	CPI  R18,37
0003c7 f411      	BRNE _0x2020020
0003c8 d179      	RCALL SUBOPT_0x6
0003c9 c0f8      	RJMP _0x20200CC
                 _0x2020020:
0003ca e012      	LDI  R17,LOW(2)
0003cb e040      	LDI  R20,LOW(0)
0003cc e000      	LDI  R16,LOW(0)
0003cd 322d      	CPI  R18,45
0003ce f411      	BRNE _0x2020021
0003cf e001      	LDI  R16,LOW(1)
0003d0 c0f2      	RJMP _0x202001B
                 _0x2020021:
0003d1 322b      	CPI  R18,43
0003d2 f411      	BRNE _0x2020022
0003d3 e24b      	LDI  R20,LOW(43)
0003d4 c0ee      	RJMP _0x202001B
                 _0x2020022:
0003d5 3220      	CPI  R18,32
0003d6 f411      	BRNE _0x2020023
0003d7 e240      	LDI  R20,LOW(32)
0003d8 c0ea      	RJMP _0x202001B
                 _0x2020023:
0003d9 c002      	RJMP _0x2020024
                 _0x202001F:
0003da 30e2      	CPI  R30,LOW(0x2)
0003db f439      	BRNE _0x2020025
                 _0x2020024:
0003dc e050      	LDI  R21,LOW(0)
0003dd e013      	LDI  R17,LOW(3)
0003de 3320      	CPI  R18,48
0003df f411      	BRNE _0x2020026
0003e0 6800      	ORI  R16,LOW(128)
0003e1 c0e1      	RJMP _0x202001B
                 _0x2020026:
0003e2 c003      	RJMP _0x2020027
                 _0x2020025:
0003e3 30e3      	CPI  R30,LOW(0x3)
0003e4 f009      	BREQ PC+2
0003e5 c0dd      	RJMP _0x202001B
                 _0x2020027:
0003e6 3320      	CPI  R18,48
0003e7 f010      	BRLO _0x202002A
0003e8 332a      	CPI  R18,58
0003e9 f008      	BRLO _0x202002B
                 _0x202002A:
0003ea c007      	RJMP _0x2020029
                 _0x202002B:
0003eb e0aa      	LDI  R26,LOW(10)
0003ec 9f5a      	MUL  R21,R26
0003ed 2d50      	MOV  R21,R0
0003ee 2fe2      	MOV  R30,R18
0003ef 53e0      	SUBI R30,LOW(48)
0003f0 0f5e      	ADD  R21,R30
0003f1 c0d1      	RJMP _0x202001B
                 _0x2020029:
0003f2 2fe2      	MOV  R30,R18
0003f3 36e3      	CPI  R30,LOW(0x63)
0003f4 f439      	BRNE _0x202002F
0003f5 d153      	RCALL SUBOPT_0x7
0003f6 89e8      	LDD  R30,Y+16
0003f7 89f9      	LDD  R31,Y+16+1
0003f8 81a4      	LDD  R26,Z+4
0003f9 93aa      	ST   -Y,R26
0003fa d154      	RCALL SUBOPT_0x8
0003fb c0c6      	RJMP _0x2020030
                 _0x202002F:
0003fc 37e3      	CPI  R30,LOW(0x73)
0003fd f429      	BRNE _0x2020032
0003fe d14a      	RCALL SUBOPT_0x7
0003ff d155      	RCALL SUBOPT_0x9
000400 d0fb      	RCALL _strlen
000401 2f1e      	MOV  R17,R30
000402 c007      	RJMP _0x2020033
                 _0x2020032:
000403 37e0      	CPI  R30,LOW(0x70)
000404 f449      	BRNE _0x2020035
000405 d143      	RCALL SUBOPT_0x7
000406 d14e      	RCALL SUBOPT_0x9
000407 d100      	RCALL _strlenf
000408 2f1e      	MOV  R17,R30
000409 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00040a 6002      	ORI  R16,LOW(2)
00040b 770f      	ANDI R16,LOW(127)
00040c e030      	LDI  R19,LOW(0)
00040d c038      	RJMP _0x2020036
                 _0x2020035:
00040e 36e4      	CPI  R30,LOW(0x64)
00040f f011      	BREQ _0x2020039
000410 36e9      	CPI  R30,LOW(0x69)
000411 f411      	BRNE _0x202003A
                 _0x2020039:
000412 6004      	ORI  R16,LOW(4)
000413 c002      	RJMP _0x202003B
                 _0x202003A:
000414 37e5      	CPI  R30,LOW(0x75)
000415 f431      	BRNE _0x202003C
                 _0x202003B:
000416 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000417 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000418 83ee      	STD  Y+6,R30
000419 83ff      	STD  Y+6+1,R31
00041a e015      	LDI  R17,LOW(5)
00041b c00c      	RJMP _0x202003D
                 _0x202003C:
00041c 35e8      	CPI  R30,LOW(0x58)
00041d f411      	BRNE _0x202003F
00041e 6008      	ORI  R16,LOW(8)
00041f c003      	RJMP _0x2020040
                 _0x202003F:
000420 37e8      	CPI  R30,LOW(0x78)
000421 f009      	BREQ PC+2
000422 c09f      	RJMP _0x2020071
                 _0x2020040:
000423 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000424 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000425 83ee      	STD  Y+6,R30
000426 83ff      	STD  Y+6+1,R31
000427 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000428 ff02      	SBRS R16,2
000429 c015      	RJMP _0x2020042
00042a d11e      	RCALL SUBOPT_0x7
00042b 89a8      	LDD  R26,Y+16
00042c 89b9      	LDD  R27,Y+16+1
00042d 9614      	ADIW R26,4
00042e 91ed      	LD   R30,X+
00042f 91fd      	LD   R31,X+
000430 87ea      	STD  Y+10,R30
000431 87fb      	STD  Y+10+1,R31
000432 85ab      	LDD  R26,Y+11
000433 23aa      	TST  R26
000434 f422      	BRPL _0x2020043
000435 d13b      	RCALL __ANEGW1
000436 87ea      	STD  Y+10,R30
000437 87fb      	STD  Y+10+1,R31
000438 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000439 3040      	CPI  R20,0
00043a f011      	BREQ _0x2020044
00043b 5f1f      	SUBI R17,-LOW(1)
00043c c001      	RJMP _0x2020045
                 _0x2020044:
00043d 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00043e c007      	RJMP _0x2020046
                 _0x2020042:
00043f d109      	RCALL SUBOPT_0x7
000440 89a8      	LDD  R26,Y+16
000441 89b9      	LDD  R27,Y+16+1
000442 9614      	ADIW R26,4
000443 d151      	RCALL __GETW1P
000444 87ea      	STD  Y+10,R30
000445 87fb      	STD  Y+10+1,R31
                 _0x2020046:
                 _0x2020036:
000446 fd00      	SBRC R16,0
000447 c010      	RJMP _0x2020047
                 _0x2020048:
000448 1715      	CP   R17,R21
000449 f470      	BRSH _0x202004A
00044a ff07      	SBRS R16,7
00044b c008      	RJMP _0x202004B
00044c ff02      	SBRS R16,2
00044d c004      	RJMP _0x202004C
00044e 7f0b      	ANDI R16,LOW(251)
00044f 2f24      	MOV  R18,R20
000450 5011      	SUBI R17,LOW(1)
000451 c001      	RJMP _0x202004D
                 _0x202004C:
000452 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000453 c001      	RJMP _0x202004E
                 _0x202004B:
000454 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000455 d0ec      	RCALL SUBOPT_0x6
000456 5051      	SUBI R21,LOW(1)
000457 cff0      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000458 2f31      	MOV  R19,R17
000459 ff01      	SBRS R16,1
00045a c016      	RJMP _0x202004F
                 _0x2020050:
00045b 3030      	CPI  R19,0
00045c f099      	BREQ _0x2020052
00045d ff03      	SBRS R16,3
00045e c006      	RJMP _0x2020053
00045f 81ee      	LDD  R30,Y+6
000460 81ff      	LDD  R31,Y+6+1
000461 9125      	LPM  R18,Z+
000462 83ee      	STD  Y+6,R30
000463 83ff      	STD  Y+6+1,R31
000464 c005      	RJMP _0x2020054
                 _0x2020053:
000465 81ae      	LDD  R26,Y+6
000466 81bf      	LDD  R27,Y+6+1
000467 912d      	LD   R18,X+
000468 83ae      	STD  Y+6,R26
000469 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00046a d0d7      	RCALL SUBOPT_0x6
00046b 3050      	CPI  R21,0
00046c f009      	BREQ _0x2020055
00046d 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00046e 5031      	SUBI R19,LOW(1)
00046f cfeb      	RJMP _0x2020050
                 _0x2020052:
000470 c048      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000471 e320      	LDI  R18,LOW(48)
000472 81ee      	LDD  R30,Y+6
000473 81ff      	LDD  R31,Y+6+1
000474 d124      	RCALL __GETW1PF
000475 87e8      	STD  Y+8,R30
000476 87f9      	STD  Y+8+1,R31
000477 81ee      	LDD  R30,Y+6
000478 81ff      	LDD  R31,Y+6+1
000479 9632      	ADIW R30,2
00047a 83ee      	STD  Y+6,R30
00047b 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00047c 85e8      	LDD  R30,Y+8
00047d 85f9      	LDD  R31,Y+8+1
00047e 85aa      	LDD  R26,Y+10
00047f 85bb      	LDD  R27,Y+10+1
000480 17ae      	CP   R26,R30
000481 07bf      	CPC  R27,R31
000482 f050      	BRLO _0x202005C
000483 5f2f      	SUBI R18,-LOW(1)
000484 85a8      	LDD  R26,Y+8
000485 85b9      	LDD  R27,Y+8+1
000486 85ea      	LDD  R30,Y+10
000487 85fb      	LDD  R31,Y+10+1
000488 1bea      	SUB  R30,R26
000489 0bfb      	SBC  R31,R27
00048a 87ea      	STD  Y+10,R30
00048b 87fb      	STD  Y+10+1,R31
00048c cfef      	RJMP _0x202005A
                 _0x202005C:
00048d 332a      	CPI  R18,58
00048e f028      	BRLO _0x202005D
00048f ff03      	SBRS R16,3
000490 c002      	RJMP _0x202005E
000491 5f29      	SUBI R18,-LOW(7)
000492 c001      	RJMP _0x202005F
                 _0x202005E:
000493 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000494 fd04      	SBRC R16,4
000495 c019      	RJMP _0x2020061
000496 3321      	CPI  R18,49
000497 f420      	BRSH _0x2020063
000498 85a8      	LDD  R26,Y+8
000499 85b9      	LDD  R27,Y+8+1
00049a 9711      	SBIW R26,1
00049b f409      	BRNE _0x2020062
                 _0x2020063:
00049c c009      	RJMP _0x20200CD
                 _0x2020062:
00049d 1753      	CP   R21,R19
00049e f010      	BRLO _0x2020067
00049f ff00      	SBRS R16,0
0004a0 c001      	RJMP _0x2020068
                 _0x2020067:
0004a1 c011      	RJMP _0x2020066
                 _0x2020068:
0004a2 e220      	LDI  R18,LOW(32)
0004a3 ff07      	SBRS R16,7
0004a4 c00a      	RJMP _0x2020069
0004a5 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0004a6 6100      	ORI  R16,LOW(16)
0004a7 ff02      	SBRS R16,2
0004a8 c006      	RJMP _0x202006A
0004a9 7f0b      	ANDI R16,LOW(251)
0004aa 934a      	ST   -Y,R20
0004ab d0a3      	RCALL SUBOPT_0x8
0004ac 3050      	CPI  R21,0
0004ad f009      	BREQ _0x202006B
0004ae 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0004af d092      	RCALL SUBOPT_0x6
0004b0 3050      	CPI  R21,0
0004b1 f009      	BREQ _0x202006C
0004b2 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0004b3 5031      	SUBI R19,LOW(1)
0004b4 85a8      	LDD  R26,Y+8
0004b5 85b9      	LDD  R27,Y+8+1
0004b6 9712      	SBIW R26,2
0004b7 f008      	BRLO _0x2020059
0004b8 cfb8      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0004b9 ff00      	SBRS R16,0
0004ba c007      	RJMP _0x202006D
                 _0x202006E:
0004bb 3050      	CPI  R21,0
0004bc f029      	BREQ _0x2020070
0004bd 5051      	SUBI R21,LOW(1)
0004be e2e0      	LDI  R30,LOW(32)
0004bf 93ea      	ST   -Y,R30
0004c0 d08e      	RCALL SUBOPT_0x8
0004c1 cff9      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0004c2 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0004c3 ceec      	RJMP _0x2020016
                 _0x2020018:
0004c4 85ac      	LDD  R26,Y+12
0004c5 85bd      	LDD  R27,Y+12+1
0004c6 91ed      	LD   R30,X+
0004c7 91fd      	LD   R31,X+
0004c8 d09d      	RCALL __LOADLOCR6
0004c9 9664      	ADIW R28,20
0004ca 9508      	RET
                 ; .FEND
                 _put_lcd_G101:
                 ; .FSTART _put_lcd_G101
0004cb d095      	RCALL __SAVELOCR4
0004cc 018d      	MOVW R16,R26
0004cd 813c      	LDD  R19,Y+4
0004ce 2fa3      	MOV  R26,R19
0004cf de84      	RCALL _lcd_putchar
0004d0 01d8      	MOVW R26,R16
0004d1 91ed      	LD   R30,X+
0004d2 91fd      	LD   R31,X+
0004d3 9631      	ADIW R30,1
0004d4 93fe      	ST   -X,R31
0004d5 93ee      	ST   -X,R30
0004d6 d091      	RCALL __LOADLOCR4
0004d7 9625      	ADIW R28,5
0004d8 9508      	RET
                 ; .FEND
                 _lcd_printf:
                 ; .FSTART _lcd_printf
0004d9 92ff      	PUSH R15
0004da 2ef8      	MOV  R15,R24
0004db 9726      	SBIW R28,6
0004dc 931a      	ST   -Y,R17
0004dd 930a      	ST   -Y,R16
0004de 01de      	MOVW R26,R28
0004df 9614      	ADIW R26,4
0004e0 d08c      	RCALL __ADDW2R15
0004e1 018d      	MOVW R16,R26
0004e2 e0e0      	LDI  R30,LOW(0)
0004e3 83ec      	STD  Y+4,R30
0004e4 83ed      	STD  Y+4+1,R30
0004e5 83ee      	STD  Y+6,R30
0004e6 83ef      	STD  Y+6+1,R30
0004e7 01de      	MOVW R26,R28
0004e8 9618      	ADIW R26,8
0004e9 d083      	RCALL __ADDW2R15
0004ea 91ed      	LD   R30,X+
0004eb 91fd      	LD   R31,X+
0004ec 93fa      	ST   -Y,R31
0004ed 93ea      	ST   -Y,R30
0004ee 931a      	ST   -Y,R17
0004ef 930a      	ST   -Y,R16
0004f0 eceb      	LDI  R30,LOW(_put_lcd_G101)
0004f1 e0f4      	LDI  R31,HIGH(_put_lcd_G101)
0004f2 93fa      	ST   -Y,R31
0004f3 93ea      	ST   -Y,R30
0004f4 01de      	MOVW R26,R28
0004f5 9618      	ADIW R26,8
0004f6 deae      	RCALL __print_G101
0004f7 8119      	LDD  R17,Y+1
0004f8 8108      	LDD  R16,Y+0
0004f9 9628      	ADIW R28,8
0004fa 90ff      	POP  R15
0004fb 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0004fc 93ba      	ST   -Y,R27
0004fd 93aa      	ST   -Y,R26
0004fe 91a9          ld   r26,y+
0004ff 91b9          ld   r27,y+
000500 27ee          clr  r30
000501 27ff          clr  r31
                 strlen0:
000502 916d          ld   r22,x+
000503 2366          tst  r22
000504 f011          breq strlen1
000505 9631          adiw r30,1
000506 cffb          rjmp strlen0
                 strlen1:
000507 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000508 93ba      	ST   -Y,R27
000509 93aa      	ST   -Y,R26
00050a 27aa          clr  r26
00050b 27bb          clr  r27
00050c 91e9          ld   r30,y+
00050d 91f9          ld   r31,y+
                 strlenf0:
00050e 9005      	lpm  r0,z+
00050f 2000          tst  r0
000510 f011          breq strlenf1
000511 9611          adiw r26,1
000512 cffb          rjmp strlenf0
                 strlenf1:
000513 01fd          movw r30,r26
000514 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _validIDs:
0002d7           	.BYTE 0xA
                 __base_y_G100:
0002e1           	.BYTE 0x4
                 __lcd_maxx:
0002e5           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000515 91e0 02d7 	LDS  R30,_validIDs
000517 91f0 02d8 	LDS  R31,_validIDs+1
000519 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00051a de4f      	RCALL _lcd_puts
00051b dcf4      	RCALL _getInput
00051c 013f      	MOVW R6,R30
00051d 01d3      	MOVW R26,R6
00051e dcd7      	RCALL _isValidId
00051f 30e0      	CPI  R30,0
000520 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000521 de48      	RCALL _lcd_puts
000522 dced      	RCALL _getInput
000523 012f      	MOVW R4,R30
000524 de25      	RCALL _lcd_clear
000525 01d3      	MOVW R26,R6
000526 cd78      	RJMP _EE_Read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x3:
000527 920a      	ST   -Y,R0
000528 921a      	ST   -Y,R1
000529 92fa      	ST   -Y,R15
00052a 936a      	ST   -Y,R22
00052b 937a      	ST   -Y,R23
00052c 938a      	ST   -Y,R24
00052d 939a      	ST   -Y,R25
00052e 93aa      	ST   -Y,R26
00052f 93ba      	ST   -Y,R27
000530 93ea      	ST   -Y,R30
000531 93fa      	ST   -Y,R31
000532 b7ef      	IN   R30,SREG
000533 93ea      	ST   -Y,R30
000534 931a      	ST   -Y,R17
000535 930a      	ST   -Y,R16
000536 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000537 ddf3      	RCALL __lcd_write_data
000538 e0a3      	LDI  R26,LOW(3)
000539 e0b0      	LDI  R27,0
00053a c067      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x5:
00053b e3a0      	LDI  R26,LOW(48)
00053c ddd9      	RCALL __lcd_write_nibble_G100
                +
00053d ec88     +LDI R24 , LOW ( 200 )
00053e e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00053f 9701     +SBIW R24 , 1
000540 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000541 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x6:
000542 932a      	ST   -Y,R18
000543 85ad      	LDD  R26,Y+13
000544 85be      	LDD  R27,Y+13+1
000545 85ef      	LDD  R30,Y+15
000546 89f8      	LDD  R31,Y+15+1
000547 9509      	ICALL
000548 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x7:
000549 89e8      	LDD  R30,Y+16
00054a 89f9      	LDD  R31,Y+16+1
00054b 9734      	SBIW R30,4
00054c 8be8      	STD  Y+16,R30
00054d 8bf9      	STD  Y+16+1,R31
00054e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
00054f 85ad      	LDD  R26,Y+13
000550 85be      	LDD  R27,Y+13+1
000551 85ef      	LDD  R30,Y+15
000552 89f8      	LDD  R31,Y+15+1
000553 9509      	ICALL
000554 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x9:
000555 89a8      	LDD  R26,Y+16
000556 89b9      	LDD  R27,Y+16+1
000557 9614      	ADIW R26,4
000558 91ed      	LD   R30,X+
000559 91fd      	LD   R31,X+
00055a 83ee      	STD  Y+6,R30
00055b 83ff      	STD  Y+6+1,R31
00055c 81ae      	LDD  R26,Y+6
00055d 81bf      	LDD  R27,Y+6+1
00055e 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
00055f 935a      	ST   -Y,R21
                 __SAVELOCR5:
000560 934a      	ST   -Y,R20
                 __SAVELOCR4:
000561 933a      	ST   -Y,R19
                 __SAVELOCR3:
000562 932a      	ST   -Y,R18
                 __SAVELOCR2:
000563 931a      	ST   -Y,R17
000564 930a      	ST   -Y,R16
000565 9508      	RET
                 
                 __LOADLOCR6:
000566 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000567 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000568 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000569 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00056a 8119      	LDD  R17,Y+1
00056b 8108      	LD   R16,Y
00056c 9508      	RET
                 
                 __ADDW2R15:
00056d 2400      	CLR  R0
00056e 0daf      	ADD  R26,R15
00056f 1db0      	ADC  R27,R0
000570 9508      	RET
                 
                 __ANEGW1:
000571 95f1      	NEG  R31
000572 95e1      	NEG  R30
000573 40f0      	SBCI R31,0
000574 9508      	RET
                 
                 __CWD1:
000575 2f6f      	MOV  R22,R31
000576 0f66      	ADD  R22,R22
000577 0b66      	SBC  R22,R22
000578 2f76      	MOV  R23,R22
000579 9508      	RET
                 
                 __MULW12U:
00057a 9ffa      	MUL  R31,R26
00057b 2df0      	MOV  R31,R0
00057c 9feb      	MUL  R30,R27
00057d 0df0      	ADD  R31,R0
00057e 9fea      	MUL  R30,R26
00057f 2de0      	MOV  R30,R0
000580 0df1      	ADD  R31,R1
000581 9508      	RET
                 
                 __MULW12:
000582 d004      	RCALL __CHKSIGNW
000583 dff6      	RCALL __MULW12U
000584 f40e      	BRTC __MULW121
000585 dfeb      	RCALL __ANEGW1
                 __MULW121:
000586 9508      	RET
                 
                 __CHKSIGNW:
000587 94e8      	CLT
000588 fff7      	SBRS R31,7
000589 c002      	RJMP __CHKSW1
00058a dfe6      	RCALL __ANEGW1
00058b 9468      	SET
                 __CHKSW1:
00058c ffb7      	SBRS R27,7
00058d c006      	RJMP __CHKSW2
00058e 95b1      	NEG  R27
00058f 95a1      	NEG  R26
000590 40b0      	SBCI R27,0
000591 f800      	BLD  R0,0
000592 9403      	INC  R0
000593 fa00      	BST  R0,0
                 __CHKSW2:
000594 9508      	RET
                 
                 __GETW1P:
000595 91ed      	LD   R30,X+
000596 91fc      	LD   R31,X
000597 9711      	SBIW R26,1
000598 9508      	RET
                 
                 __GETW1PF:
000599 9005      	LPM  R0,Z+
00059a 91f4      	LPM  R31,Z
00059b 2de0      	MOV  R30,R0
00059c 9508      	RET
                 
                 __PUTPARD1:
00059d 937a      	ST   -Y,R23
00059e 936a      	ST   -Y,R22
00059f 93fa      	ST   -Y,R31
0005a0 93ea      	ST   -Y,R30
0005a1 9508      	RET
                 
                 _delay_ms:
0005a2 9610      	adiw r26,0
0005a3 f039      	breq __delay_ms1
                 __delay_ms0:
0005a4 95a8      	wdr
                +
0005a5 ed80     +LDI R24 , LOW ( 0x7D0 )
0005a6 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0005a7 9701     +SBIW R24 , 1
0005a8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0005a9 9711      	sbiw r26,1
0005aa f7c9      	brne __delay_ms0
                 __delay_ms1:
0005ab 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  19 r1 :   4 r2 :   0 r3 :   0 r4 :   5 r5 :   2 r6 :   9 r7 :   3 
r8 :   3 r9 :   1 r10:   2 r11:   2 r12:   4 r13:   4 r14:   0 r15:   6 
r16:  58 r17:  53 r18:  37 r19:  17 r20:  12 r21:  19 r22:  13 r23:   4 
r24:  25 r25:   7 r26: 136 r27:  67 r28:  14 r29:   1 r30: 229 r31:  82 
x  :  22 y  : 183 z  :  14 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   8 
adiw  :  20 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  16 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   0 brne  :  53 brpl  :   1 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :  10 cpc   :  14 cpi   :  52 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   9 inc   :   3 jmp   :  22 ld    :  41 ldd   :  61 ldi   : 174 
lds   :  11 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  38 movw  :  33 
mul   :   4 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   9 out   :  22 pop   :   1 push  :   1 rcall : 134 ret   :  45 
reti  :   1 rjmp  : 100 rol   :   1 ror   :   0 sbc   :   2 sbci  :   6 
sbi   :  18 sbic  :   2 sbis  :  12 sbiw  :  14 sbr   :   0 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  75 std   :  30 sts   :   3 sub   :   1 subi  :  19 swap  :   1 
tst   :   3 wdr   :   1 
Instructions used: 62 out of 116 (53.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b58   2384    520   2904   16384  17.7%
[.dseg] 0x000060 0x0002e6      0    390    390    1024  38.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
